/*
 * Laserfiche Repository API
 * Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p><strong>Build# : </strong>51c16645afa5983c3eb4a849158d6f1e355d2bb0_.20220512.1</p>
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.laserfiche.api.client.test;

import com.laserfiche.api.client.apiserver.ServerSessionApi;
import com.laserfiche.api.client.model.ODataValueOfBoolean;
import com.laserfiche.api.client.model.ODataValueOfDateTime;
import com.laserfiche.api.client.model.ProblemDetails;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ServerSessionApi
 */
@Ignore
public class ServerSessionApiTest {

    private final ServerSessionApi api = new ServerSessionApi();

    /**
     * 
     *
     * - Creates the server session to be used with later requests.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createServerSessionTest() throws Exception {
        String repoId = null;
        ODataValueOfBoolean response = api.createServerSession(repoId);

        // TODO: test validations
    }
    /**
     * 
     *
     * - Invalidates the server session. - Acts as a \&quot;logout\&quot; operation, and invalidates the session associated with the provided access token. This method should be used when the client wants to clean up the current session.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void invalidateServerSessionTest() throws Exception {
        String repoId = null;
        ODataValueOfBoolean response = api.invalidateServerSession(repoId);

        // TODO: test validations
    }
    /**
     * 
     *
     * - Refreshes the session associated with the access token. This is only necessary if you want to keep the same session alive, otherwise a new session will be automatically created when the session expires. - When a client application wants to keep a session alive that has been idle for an hour, this route can be used to refresh the expiration timer associated with the access token.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void refreshServerSessionTest() throws Exception {
        String repoId = null;
        ODataValueOfDateTime response = api.refreshServerSession(repoId);

        // TODO: test validations
    }
}
