/*
 * Laserfiche Repository API
 * Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p><strong>Build# : </strong>eb72c77d640efc5f986310ccc43114fc25742dab_.20220610.1</p>
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.laserfiche.repository.api.clients.impl.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Shortcut
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-06-21T09:31:30.649462900-04:00[America/New_York]")
public class Shortcut extends Entry {
  @SerializedName("targetId")
  private Integer targetId = null;

  @SerializedName("extension")
  private String extension = null;

  @SerializedName("targetType")
  private Object targetType = null;

  public Shortcut targetId(Integer targetId) {
    this.targetId = targetId;
    return this;
  }

   /**
   * The entry ID of the shortcut target.
   * @return targetId
  **/
  @Schema(description = "The entry ID of the shortcut target.")
  public Integer getTargetId() {
    return targetId;
  }

  public void setTargetId(Integer targetId) {
    this.targetId = targetId;
  }

  public Shortcut extension(String extension) {
    this.extension = extension;
    return this;
  }

   /**
   * The extension of the shortcut target.
   * @return extension
  **/
  @Schema(description = "The extension of the shortcut target.")
  public String getExtension() {
    return extension;
  }

  public void setExtension(String extension) {
    this.extension = extension;
  }

  public Shortcut targetType(Object targetType) {
    this.targetType = targetType;
    return this;
  }

   /**
   * The entry type of the shortcut target.
   * @return targetType
  **/
  @Schema(description = "The entry type of the shortcut target.")
  public Object getTargetType() {
    return targetType;
  }

  public void setTargetType(Object targetType) {
    this.targetType = targetType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Shortcut shortcut = (Shortcut) o;
    return Objects.equals(this.targetId, shortcut.targetId) &&
        Objects.equals(this.extension, shortcut.extension) &&
        Objects.equals(this.targetType, shortcut.targetType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetId, extension, targetType, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Shortcut {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    targetType: ").append(toIndentedString(targetType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
