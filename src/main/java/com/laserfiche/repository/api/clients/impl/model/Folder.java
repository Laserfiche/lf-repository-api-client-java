/*
 * Laserfiche Repository API
 * Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p><strong>Build# : </strong>eb72c77d640efc5f986310ccc43114fc25742dab_.20220610.1</p>
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.laserfiche.repository.api.clients.impl.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;

/**
 * Folder
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-06-21T09:31:30.649462900-04:00[America/New_York]")
public class Folder extends Entry {
  @SerializedName("isRecordFolder")
  private Boolean isRecordFolder = null;

  @SerializedName("isUnderRecordSeries")
  private Boolean isUnderRecordSeries = null;

  @SerializedName("children")
  private List<Entry> children = null;

  public Folder isRecordFolder(Boolean isRecordFolder) {
    this.isRecordFolder = isRecordFolder;
    return this;
  }

   /**
   * A boolean indicating if the folder that this instance represents is known to be a record folder.
   * @return isRecordFolder
  **/
  @Schema(description = "A boolean indicating if the folder that this instance represents is known to be a record folder.")
  public Boolean isIsRecordFolder() {
    return isRecordFolder;
  }

  public void setIsRecordFolder(Boolean isRecordFolder) {
    this.isRecordFolder = isRecordFolder;
  }

  public Folder isUnderRecordSeries(Boolean isUnderRecordSeries) {
    this.isUnderRecordSeries = isUnderRecordSeries;
    return this;
  }

   /**
   * A boolean indicating if the folder that this instance represents is known to directly or indirectly under a record series in the repository.
   * @return isUnderRecordSeries
  **/
  @Schema(description = "A boolean indicating if the folder that this instance represents is known to directly or indirectly under a record series in the repository.")
  public Boolean isIsUnderRecordSeries() {
    return isUnderRecordSeries;
  }

  public void setIsUnderRecordSeries(Boolean isUnderRecordSeries) {
    this.isUnderRecordSeries = isUnderRecordSeries;
  }

  public Folder children(List<Entry> children) {
    this.children = children;
    return this;
  }

  public Folder addChildrenItem(Entry childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<Entry>();
    }
    this.children.add(childrenItem);
    return this;
  }

   /**
   * The entries in this folder.
   * @return children
  **/
  @Schema(description = "The entries in this folder.")
  public List<Entry> getChildren() {
    return children;
  }

  public void setChildren(List<Entry> children) {
    this.children = children;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Folder folder = (Folder) o;
    return Objects.equals(this.isRecordFolder, folder.isRecordFolder) &&
        Objects.equals(this.isUnderRecordSeries, folder.isUnderRecordSeries) &&
        Objects.equals(this.children, folder.children) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isRecordFolder, isUnderRecordSeries, children, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Folder {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    isRecordFolder: ").append(toIndentedString(isRecordFolder)).append("\n");
    sb.append("    isUnderRecordSeries: ").append(toIndentedString(isUnderRecordSeries)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
