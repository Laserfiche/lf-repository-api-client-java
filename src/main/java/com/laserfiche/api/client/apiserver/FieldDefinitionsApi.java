/*
 * Laserfiche Repository API
 * Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p><strong>Build# : </strong>51c16645afa5983c3eb4a849158d6f1e355d2bb0_.20220512.1</p>
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.laserfiche.api.client.apiserver;

import com.laserfiche.api.client.ApiCallback;
import com.laserfiche.api.client.ApiClient;
import com.laserfiche.api.client.ApiException;
import com.laserfiche.api.client.ApiResponse;
import com.laserfiche.api.client.Configuration;
import com.laserfiche.api.client.Pair;
import com.laserfiche.api.client.ProgressRequestBody;
import com.laserfiche.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.laserfiche.api.client.model.ODataValueContextOfIListOfWFieldInfo;
import com.laserfiche.api.client.model.ProblemDetails;
import com.laserfiche.api.client.model.WFieldInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FieldDefinitionsApi {
    private ApiClient apiClient;

    public FieldDefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FieldDefinitionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getFieldDefinitionById
     * @param repoId The requested repository ID. (required)
     * @param fieldDefinitionId The requested field definition ID. (required)
     * @param culture An optional query parameter used to indicate the locale that should be used for formatting.             The value should be a standard language tag. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFieldDefinitionByIdCall(String repoId, Integer fieldDefinitionId, String culture, String $select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/FieldDefinitions/{fieldDefinitionId}"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "fieldDefinitionId" + "\\}", apiClient.escapeString(fieldDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (culture != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("culture", culture));
        if ($select != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$select", $select));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFieldDefinitionByIdValidateBeforeCall(String repoId, Integer fieldDefinitionId, String culture, String $select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling getFieldDefinitionById(Async)");
        }
        // verify the required parameter 'fieldDefinitionId' is set
        if (fieldDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'fieldDefinitionId' when calling getFieldDefinitionById(Async)");
        }
        
        com.squareup.okhttp.Call call = getFieldDefinitionByIdCall(repoId, fieldDefinitionId, culture, $select, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Returns a single field definition associated with the specified ID.  - Useful when a route provides a minimal amount of details and more information about the specific field definition is needed. - Allowed OData query options: Select
     * @param repoId The requested repository ID. (required)
     * @param fieldDefinitionId The requested field definition ID. (required)
     * @param culture An optional query parameter used to indicate the locale that should be used for formatting.             The value should be a standard language tag. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @return WFieldInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WFieldInfo getFieldDefinitionById(String repoId, Integer fieldDefinitionId, String culture, String $select) throws ApiException {
        ApiResponse<WFieldInfo> resp = getFieldDefinitionByIdWithHttpInfo(repoId, fieldDefinitionId, culture, $select);
        return resp.getData();
    }

    /**
     * 
     * - Returns a single field definition associated with the specified ID.  - Useful when a route provides a minimal amount of details and more information about the specific field definition is needed. - Allowed OData query options: Select
     * @param repoId The requested repository ID. (required)
     * @param fieldDefinitionId The requested field definition ID. (required)
     * @param culture An optional query parameter used to indicate the locale that should be used for formatting.             The value should be a standard language tag. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @return ApiResponse&lt;WFieldInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WFieldInfo> getFieldDefinitionByIdWithHttpInfo(String repoId, Integer fieldDefinitionId, String culture, String $select) throws ApiException {
        com.squareup.okhttp.Call call = getFieldDefinitionByIdValidateBeforeCall(repoId, fieldDefinitionId, culture, $select, null, null);
        Type localVarReturnType = new TypeToken<WFieldInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Returns a single field definition associated with the specified ID.  - Useful when a route provides a minimal amount of details and more information about the specific field definition is needed. - Allowed OData query options: Select
     * @param repoId The requested repository ID. (required)
     * @param fieldDefinitionId The requested field definition ID. (required)
     * @param culture An optional query parameter used to indicate the locale that should be used for formatting.             The value should be a standard language tag. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFieldDefinitionByIdAsync(String repoId, Integer fieldDefinitionId, String culture, String $select, final ApiCallback<WFieldInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFieldDefinitionByIdValidateBeforeCall(repoId, fieldDefinitionId, culture, $select, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WFieldInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFieldDefinitions
     * @param repoId The requested repository ID. (required)
     * @param prefer An optional OData header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used for formatting.             The value should be a standard language tag. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFieldDefinitionsCall(String repoId, String prefer, String culture, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/FieldDefinitions"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (culture != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("culture", culture));
        if ($select != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$select", $select));
        if ($orderby != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$orderby", $orderby));
        if ($top != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$top", $top));
        if ($skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$skip", $skip));
        if ($count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$count", $count));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (prefer != null)
        localVarHeaderParams.put("Prefer", apiClient.parameterToString(prefer));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFieldDefinitionsValidateBeforeCall(String repoId, String prefer, String culture, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling getFieldDefinitions(Async)");
        }
        
        com.squareup.okhttp.Call call = getFieldDefinitionsCall(repoId, prefer, culture, $select, $orderby, $top, $skip, $count, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Returns a paged listing of field definitions available in the specified repository. - Useful when trying to find a list of all field definitions available, rather than only those assigned to a specific entry/template. - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
     * @param repoId The requested repository ID. (required)
     * @param prefer An optional OData header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used for formatting.             The value should be a standard language tag. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @return ODataValueContextOfIListOfWFieldInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ODataValueContextOfIListOfWFieldInfo getFieldDefinitions(String repoId, String prefer, String culture, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count) throws ApiException {
        ApiResponse<ODataValueContextOfIListOfWFieldInfo> resp = getFieldDefinitionsWithHttpInfo(repoId, prefer, culture, $select, $orderby, $top, $skip, $count);
        return resp.getData();
    }

    /**
     * 
     * - Returns a paged listing of field definitions available in the specified repository. - Useful when trying to find a list of all field definitions available, rather than only those assigned to a specific entry/template. - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
     * @param repoId The requested repository ID. (required)
     * @param prefer An optional OData header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used for formatting.             The value should be a standard language tag. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @return ApiResponse&lt;ODataValueContextOfIListOfWFieldInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ODataValueContextOfIListOfWFieldInfo> getFieldDefinitionsWithHttpInfo(String repoId, String prefer, String culture, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count) throws ApiException {
        com.squareup.okhttp.Call call = getFieldDefinitionsValidateBeforeCall(repoId, prefer, culture, $select, $orderby, $top, $skip, $count, null, null);
        Type localVarReturnType = new TypeToken<ODataValueContextOfIListOfWFieldInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Returns a paged listing of field definitions available in the specified repository. - Useful when trying to find a list of all field definitions available, rather than only those assigned to a specific entry/template. - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
     * @param repoId The requested repository ID. (required)
     * @param prefer An optional OData header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used for formatting.             The value should be a standard language tag. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFieldDefinitionsAsync(String repoId, String prefer, String culture, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ApiCallback<ODataValueContextOfIListOfWFieldInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFieldDefinitionsValidateBeforeCall(repoId, prefer, culture, $select, $orderby, $top, $skip, $count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ODataValueContextOfIListOfWFieldInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
