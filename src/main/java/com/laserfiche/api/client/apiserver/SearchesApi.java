/*
 * Laserfiche Repository API
 * Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p><strong>Build# : </strong>51c16645afa5983c3eb4a849158d6f1e355d2bb0_.20220512.1</p>
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.laserfiche.api.client.apiserver;

import com.laserfiche.api.client.ApiCallback;
import com.laserfiche.api.client.ApiClient;
import com.laserfiche.api.client.ApiException;
import com.laserfiche.api.client.ApiResponse;
import com.laserfiche.api.client.Configuration;
import com.laserfiche.api.client.Pair;
import com.laserfiche.api.client.ProgressRequestBody;
import com.laserfiche.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.laserfiche.api.client.model.AcceptedOperation;
import com.laserfiche.api.client.model.AdvancedSearchRequest;
import com.laserfiche.api.client.model.ODataValueContextOfIListOfContextHit;
import com.laserfiche.api.client.model.ODataValueContextOfIListOfODataGetSearchResults;
import com.laserfiche.api.client.model.ODataValueOfBoolean;
import com.laserfiche.api.client.model.OperationProgress;
import com.laserfiche.api.client.model.ProblemDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchesApi {
    private ApiClient apiClient;

    public SearchesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelOrCloseSearch
     * @param repoId The requested repository ID. (required)
     * @param searchToken The requested searchToken. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelOrCloseSearchCall(String repoId, String searchToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Searches/{searchToken}"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "searchToken" + "\\}", apiClient.escapeString(searchToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelOrCloseSearchValidateBeforeCall(String repoId, String searchToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling cancelOrCloseSearch(Async)");
        }
        // verify the required parameter 'searchToken' is set
        if (searchToken == null) {
            throw new ApiException("Missing the required parameter 'searchToken' when calling cancelOrCloseSearch(Async)");
        }
        
        com.squareup.okhttp.Call call = cancelOrCloseSearchCall(repoId, searchToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel or close an advanced search.
     * - Cancels a currently running search. - Closes a completed search.
     * @param repoId The requested repository ID. (required)
     * @param searchToken The requested searchToken. (required)
     * @return ODataValueOfBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ODataValueOfBoolean cancelOrCloseSearch(String repoId, String searchToken) throws ApiException {
        ApiResponse<ODataValueOfBoolean> resp = cancelOrCloseSearchWithHttpInfo(repoId, searchToken);
        return resp.getData();
    }

    /**
     * Cancel or close an advanced search.
     * - Cancels a currently running search. - Closes a completed search.
     * @param repoId The requested repository ID. (required)
     * @param searchToken The requested searchToken. (required)
     * @return ApiResponse&lt;ODataValueOfBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ODataValueOfBoolean> cancelOrCloseSearchWithHttpInfo(String repoId, String searchToken) throws ApiException {
        com.squareup.okhttp.Call call = cancelOrCloseSearchValidateBeforeCall(repoId, searchToken, null, null);
        Type localVarReturnType = new TypeToken<ODataValueOfBoolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel or close an advanced search. (asynchronously)
     * - Cancels a currently running search. - Closes a completed search.
     * @param repoId The requested repository ID. (required)
     * @param searchToken The requested searchToken. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelOrCloseSearchAsync(String repoId, String searchToken, final ApiCallback<ODataValueOfBoolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelOrCloseSearchValidateBeforeCall(repoId, searchToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ODataValueOfBoolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSearchOperation
     * @param repoId The requested repository ID. (required)
     * @param body The Laserfiche search command to run, optionally include fuzzy search settings. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSearchOperationCall(String repoId, AdvancedSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Searches"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSearchOperationValidateBeforeCall(String repoId, AdvancedSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling createSearchOperation(Async)");
        }
        
        com.squareup.okhttp.Call call = createSearchOperationCall(repoId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Run a search in the specified repository.
     * - Runs a search operation on the repository. - Optional body parameters: FuzzyType: (default none), which can be used to determine what is considered a match by number of letters or percentage. FuzzyFactor: integer value that determines the degree to which a search will be considered a match (integer value for NumberOfLetters, or int value representing a percentage). The status for search operations must be checked via the Search specific status checking route.         
     * @param repoId The requested repository ID. (required)
     * @param body The Laserfiche search command to run, optionally include fuzzy search settings. (optional)
     * @return AcceptedOperation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AcceptedOperation createSearchOperation(String repoId, AdvancedSearchRequest body) throws ApiException {
        ApiResponse<AcceptedOperation> resp = createSearchOperationWithHttpInfo(repoId, body);
        return resp.getData();
    }

    /**
     * Run a search in the specified repository.
     * - Runs a search operation on the repository. - Optional body parameters: FuzzyType: (default none), which can be used to determine what is considered a match by number of letters or percentage. FuzzyFactor: integer value that determines the degree to which a search will be considered a match (integer value for NumberOfLetters, or int value representing a percentage). The status for search operations must be checked via the Search specific status checking route.         
     * @param repoId The requested repository ID. (required)
     * @param body The Laserfiche search command to run, optionally include fuzzy search settings. (optional)
     * @return ApiResponse&lt;AcceptedOperation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AcceptedOperation> createSearchOperationWithHttpInfo(String repoId, AdvancedSearchRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createSearchOperationValidateBeforeCall(repoId, body, null, null);
        Type localVarReturnType = new TypeToken<AcceptedOperation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Run a search in the specified repository. (asynchronously)
     * - Runs a search operation on the repository. - Optional body parameters: FuzzyType: (default none), which can be used to determine what is considered a match by number of letters or percentage. FuzzyFactor: integer value that determines the degree to which a search will be considered a match (integer value for NumberOfLetters, or int value representing a percentage). The status for search operations must be checked via the Search specific status checking route.         
     * @param repoId The requested repository ID. (required)
     * @param body The Laserfiche search command to run, optionally include fuzzy search settings. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSearchOperationAsync(String repoId, AdvancedSearchRequest body, final ApiCallback<AcceptedOperation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSearchOperationValidateBeforeCall(repoId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AcceptedOperation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSearchContextHits
     * @param repoId The requested repository ID. (required)
     * @param searchToken The requested searchToken. (required)
     * @param rowNumber The search result listing row number to get context hits for. (required)
     * @param prefer An optional OData header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSearchContextHitsCall(String repoId, String searchToken, Integer rowNumber, String prefer, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Searches/{searchToken}/Results/{rowNumber}/ContextHits"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "searchToken" + "\\}", apiClient.escapeString(searchToken.toString()))
            .replaceAll("\\{" + "rowNumber" + "\\}", apiClient.escapeString(rowNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if ($select != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$select", $select));
        if ($orderby != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$orderby", $orderby));
        if ($top != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$top", $top));
        if ($skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$skip", $skip));
        if ($count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$count", $count));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (prefer != null)
        localVarHeaderParams.put("Prefer", apiClient.parameterToString(prefer));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSearchContextHitsValidateBeforeCall(String repoId, String searchToken, Integer rowNumber, String prefer, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling getSearchContextHits(Async)");
        }
        // verify the required parameter 'searchToken' is set
        if (searchToken == null) {
            throw new ApiException("Missing the required parameter 'searchToken' when calling getSearchContextHits(Async)");
        }
        // verify the required parameter 'rowNumber' is set
        if (rowNumber == null) {
            throw new ApiException("Missing the required parameter 'rowNumber' when calling getSearchContextHits(Async)");
        }
        
        com.squareup.okhttp.Call call = getSearchContextHitsCall(repoId, searchToken, rowNumber, prefer, $select, $orderby, $top, $skip, $count, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Returns the context hits associated with a search result entry. - Given a searchToken, and rowNumber associated with a search entry in the listing, return the context hits for that entry. - Default page size: 150. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
     * @param repoId The requested repository ID. (required)
     * @param searchToken The requested searchToken. (required)
     * @param rowNumber The search result listing row number to get context hits for. (required)
     * @param prefer An optional OData header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @return ODataValueContextOfIListOfContextHit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ODataValueContextOfIListOfContextHit getSearchContextHits(String repoId, String searchToken, Integer rowNumber, String prefer, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count) throws ApiException {
        ApiResponse<ODataValueContextOfIListOfContextHit> resp = getSearchContextHitsWithHttpInfo(repoId, searchToken, rowNumber, prefer, $select, $orderby, $top, $skip, $count);
        return resp.getData();
    }

    /**
     * 
     * - Returns the context hits associated with a search result entry. - Given a searchToken, and rowNumber associated with a search entry in the listing, return the context hits for that entry. - Default page size: 150. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
     * @param repoId The requested repository ID. (required)
     * @param searchToken The requested searchToken. (required)
     * @param rowNumber The search result listing row number to get context hits for. (required)
     * @param prefer An optional OData header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @return ApiResponse&lt;ODataValueContextOfIListOfContextHit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ODataValueContextOfIListOfContextHit> getSearchContextHitsWithHttpInfo(String repoId, String searchToken, Integer rowNumber, String prefer, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count) throws ApiException {
        com.squareup.okhttp.Call call = getSearchContextHitsValidateBeforeCall(repoId, searchToken, rowNumber, prefer, $select, $orderby, $top, $skip, $count, null, null);
        Type localVarReturnType = new TypeToken<ODataValueContextOfIListOfContextHit>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Returns the context hits associated with a search result entry. - Given a searchToken, and rowNumber associated with a search entry in the listing, return the context hits for that entry. - Default page size: 150. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
     * @param repoId The requested repository ID. (required)
     * @param searchToken The requested searchToken. (required)
     * @param rowNumber The search result listing row number to get context hits for. (required)
     * @param prefer An optional OData header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSearchContextHitsAsync(String repoId, String searchToken, Integer rowNumber, String prefer, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ApiCallback<ODataValueContextOfIListOfContextHit> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSearchContextHitsValidateBeforeCall(repoId, searchToken, rowNumber, prefer, $select, $orderby, $top, $skip, $count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ODataValueContextOfIListOfContextHit>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSearchResults
     * @param repoId The requested repository ID. (required)
     * @param searchToken The requested searchToken. (required)
     * @param groupByEntryType An optional query parameter used to indicate if the result should be grouped by entry type or not. (optional)
     * @param refresh If the search listing should be refreshed to show updated values. (optional)
     * @param fields Optional array of field names. Field values corresponding to the given field names will be returned for each search result.  (optional)
     * @param formatFields Boolean for if field values should be formatted. Only applicable if Fields are specified. (optional)
     * @param prefer An optional odata header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used for formatting.             The value should be a standard language tag. The formatFields query parameter must be set to true, otherwise             culture will not be used for formatting. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSearchResultsCall(String repoId, String searchToken, Boolean groupByEntryType, Boolean refresh, List<String> fields, Boolean formatFields, String prefer, String culture, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Searches/{searchToken}/Results"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "searchToken" + "\\}", apiClient.escapeString(searchToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (groupByEntryType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupByEntryType", groupByEntryType));
        if (refresh != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("refresh", refresh));
        if (fields != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "fields", fields));
        if (formatFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("formatFields", formatFields));
        if (culture != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("culture", culture));
        if ($select != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$select", $select));
        if ($orderby != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$orderby", $orderby));
        if ($top != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$top", $top));
        if ($skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$skip", $skip));
        if ($count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$count", $count));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (prefer != null)
        localVarHeaderParams.put("Prefer", apiClient.parameterToString(prefer));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSearchResultsValidateBeforeCall(String repoId, String searchToken, Boolean groupByEntryType, Boolean refresh, List<String> fields, Boolean formatFields, String prefer, String culture, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling getSearchResults(Async)");
        }
        // verify the required parameter 'searchToken' is set
        if (searchToken == null) {
            throw new ApiException("Missing the required parameter 'searchToken' when calling getSearchResults(Async)");
        }
        
        com.squareup.okhttp.Call call = getSearchResultsCall(repoId, searchToken, groupByEntryType, refresh, fields, formatFields, prefer, culture, $select, $orderby, $top, $skip, $count, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the search results listing of a search.
     * - Returns a search result listing if the search is completed. - Optional query parameter: groupByOrderType (default false). This query parameter decides whether or not results are returned in groups based on their entry type. - Optional query parameter: refresh (default false). If the search listing should be refreshed to show updated values. - Default page size: 150. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer. OData $OrderBy syntax should follow: \&quot;PropertyName direction,PropertyName2 direction\&quot;. sort order can be either \&quot;asc\&quot; or \&quot;desc\&quot;. Search results expire after 5 minutes, but can be refreshed by retrieving the results again. - Optionally returns field values for the entries in the search result listing. Each field name needs to be specified in the request. Maximum limit of 10 field names. - If field values are requested, only the first value is returned if it is a multi value field. - Null or Empty field values should not be used to determine if a field is assigned to the entry.
     * @param repoId The requested repository ID. (required)
     * @param searchToken The requested searchToken. (required)
     * @param groupByEntryType An optional query parameter used to indicate if the result should be grouped by entry type or not. (optional)
     * @param refresh If the search listing should be refreshed to show updated values. (optional)
     * @param fields Optional array of field names. Field values corresponding to the given field names will be returned for each search result.  (optional)
     * @param formatFields Boolean for if field values should be formatted. Only applicable if Fields are specified. (optional)
     * @param prefer An optional odata header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used for formatting.             The value should be a standard language tag. The formatFields query parameter must be set to true, otherwise             culture will not be used for formatting. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @return ODataValueContextOfIListOfODataGetSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ODataValueContextOfIListOfODataGetSearchResults getSearchResults(String repoId, String searchToken, Boolean groupByEntryType, Boolean refresh, List<String> fields, Boolean formatFields, String prefer, String culture, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count) throws ApiException {
        ApiResponse<ODataValueContextOfIListOfODataGetSearchResults> resp = getSearchResultsWithHttpInfo(repoId, searchToken, groupByEntryType, refresh, fields, formatFields, prefer, culture, $select, $orderby, $top, $skip, $count);
        return resp.getData();
    }

    /**
     * Get the search results listing of a search.
     * - Returns a search result listing if the search is completed. - Optional query parameter: groupByOrderType (default false). This query parameter decides whether or not results are returned in groups based on their entry type. - Optional query parameter: refresh (default false). If the search listing should be refreshed to show updated values. - Default page size: 150. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer. OData $OrderBy syntax should follow: \&quot;PropertyName direction,PropertyName2 direction\&quot;. sort order can be either \&quot;asc\&quot; or \&quot;desc\&quot;. Search results expire after 5 minutes, but can be refreshed by retrieving the results again. - Optionally returns field values for the entries in the search result listing. Each field name needs to be specified in the request. Maximum limit of 10 field names. - If field values are requested, only the first value is returned if it is a multi value field. - Null or Empty field values should not be used to determine if a field is assigned to the entry.
     * @param repoId The requested repository ID. (required)
     * @param searchToken The requested searchToken. (required)
     * @param groupByEntryType An optional query parameter used to indicate if the result should be grouped by entry type or not. (optional)
     * @param refresh If the search listing should be refreshed to show updated values. (optional)
     * @param fields Optional array of field names. Field values corresponding to the given field names will be returned for each search result.  (optional)
     * @param formatFields Boolean for if field values should be formatted. Only applicable if Fields are specified. (optional)
     * @param prefer An optional odata header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used for formatting.             The value should be a standard language tag. The formatFields query parameter must be set to true, otherwise             culture will not be used for formatting. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @return ApiResponse&lt;ODataValueContextOfIListOfODataGetSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ODataValueContextOfIListOfODataGetSearchResults> getSearchResultsWithHttpInfo(String repoId, String searchToken, Boolean groupByEntryType, Boolean refresh, List<String> fields, Boolean formatFields, String prefer, String culture, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count) throws ApiException {
        com.squareup.okhttp.Call call = getSearchResultsValidateBeforeCall(repoId, searchToken, groupByEntryType, refresh, fields, formatFields, prefer, culture, $select, $orderby, $top, $skip, $count, null, null);
        Type localVarReturnType = new TypeToken<ODataValueContextOfIListOfODataGetSearchResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the search results listing of a search. (asynchronously)
     * - Returns a search result listing if the search is completed. - Optional query parameter: groupByOrderType (default false). This query parameter decides whether or not results are returned in groups based on their entry type. - Optional query parameter: refresh (default false). If the search listing should be refreshed to show updated values. - Default page size: 150. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer. OData $OrderBy syntax should follow: \&quot;PropertyName direction,PropertyName2 direction\&quot;. sort order can be either \&quot;asc\&quot; or \&quot;desc\&quot;. Search results expire after 5 minutes, but can be refreshed by retrieving the results again. - Optionally returns field values for the entries in the search result listing. Each field name needs to be specified in the request. Maximum limit of 10 field names. - If field values are requested, only the first value is returned if it is a multi value field. - Null or Empty field values should not be used to determine if a field is assigned to the entry.
     * @param repoId The requested repository ID. (required)
     * @param searchToken The requested searchToken. (required)
     * @param groupByEntryType An optional query parameter used to indicate if the result should be grouped by entry type or not. (optional)
     * @param refresh If the search listing should be refreshed to show updated values. (optional)
     * @param fields Optional array of field names. Field values corresponding to the given field names will be returned for each search result.  (optional)
     * @param formatFields Boolean for if field values should be formatted. Only applicable if Fields are specified. (optional)
     * @param prefer An optional odata header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used for formatting.             The value should be a standard language tag. The formatFields query parameter must be set to true, otherwise             culture will not be used for formatting. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSearchResultsAsync(String repoId, String searchToken, Boolean groupByEntryType, Boolean refresh, List<String> fields, Boolean formatFields, String prefer, String culture, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ApiCallback<ODataValueContextOfIListOfODataGetSearchResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSearchResultsValidateBeforeCall(repoId, searchToken, groupByEntryType, refresh, fields, formatFields, prefer, culture, $select, $orderby, $top, $skip, $count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ODataValueContextOfIListOfODataGetSearchResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSearchStatus
     * @param repoId The requested repository ID. (required)
     * @param searchToken The requested searchToken. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSearchStatusCall(String repoId, String searchToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Searches/{searchToken}"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "searchToken" + "\\}", apiClient.escapeString(searchToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSearchStatusValidateBeforeCall(String repoId, String searchToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling getSearchStatus(Async)");
        }
        // verify the required parameter 'searchToken' is set
        if (searchToken == null) {
            throw new ApiException("Missing the required parameter 'searchToken' when calling getSearchStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getSearchStatusCall(repoId, searchToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the status of a search using a token.
     * - Returns search status. - Provide a token (returned in the create search asynchronous route), and get the search status, progress, and any errors that may have occurred. When the search is completed, the Location header can be inspected as a link to the search results. - OperationStatus can be one of the following : NotStarted, InProgress, Completed, Failed, or Canceled.
     * @param repoId The requested repository ID. (required)
     * @param searchToken The requested searchToken. (required)
     * @return OperationProgress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OperationProgress getSearchStatus(String repoId, String searchToken) throws ApiException {
        ApiResponse<OperationProgress> resp = getSearchStatusWithHttpInfo(repoId, searchToken);
        return resp.getData();
    }

    /**
     * Get the status of a search using a token.
     * - Returns search status. - Provide a token (returned in the create search asynchronous route), and get the search status, progress, and any errors that may have occurred. When the search is completed, the Location header can be inspected as a link to the search results. - OperationStatus can be one of the following : NotStarted, InProgress, Completed, Failed, or Canceled.
     * @param repoId The requested repository ID. (required)
     * @param searchToken The requested searchToken. (required)
     * @return ApiResponse&lt;OperationProgress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OperationProgress> getSearchStatusWithHttpInfo(String repoId, String searchToken) throws ApiException {
        com.squareup.okhttp.Call call = getSearchStatusValidateBeforeCall(repoId, searchToken, null, null);
        Type localVarReturnType = new TypeToken<OperationProgress>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the status of a search using a token. (asynchronously)
     * - Returns search status. - Provide a token (returned in the create search asynchronous route), and get the search status, progress, and any errors that may have occurred. When the search is completed, the Location header can be inspected as a link to the search results. - OperationStatus can be one of the following : NotStarted, InProgress, Completed, Failed, or Canceled.
     * @param repoId The requested repository ID. (required)
     * @param searchToken The requested searchToken. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSearchStatusAsync(String repoId, String searchToken, final ApiCallback<OperationProgress> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSearchStatusValidateBeforeCall(repoId, searchToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OperationProgress>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
