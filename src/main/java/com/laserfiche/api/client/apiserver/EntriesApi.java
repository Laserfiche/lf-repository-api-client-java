/*
 * Laserfiche Repository API
 * Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p><strong>Build# : </strong>51c16645afa5983c3eb4a849158d6f1e355d2bb0_.20220512.1</p>
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.laserfiche.api.client.apiserver;

import com.laserfiche.api.client.ApiCallback;
import com.laserfiche.api.client.ApiClient;
import com.laserfiche.api.client.ApiException;
import com.laserfiche.api.client.ApiResponse;
import com.laserfiche.api.client.Configuration;
import com.laserfiche.api.client.Pair;
import com.laserfiche.api.client.ProgressRequestBody;
import com.laserfiche.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.laserfiche.api.client.model.AcceptedOperation;
import com.laserfiche.api.client.model.CopyAsyncRequest;
import com.laserfiche.api.client.model.CreateEntryResult;
import com.laserfiche.api.client.model.DeleteEntryWithAuditReason;
import com.laserfiche.api.client.model.Entry;
import com.laserfiche.api.client.model.FieldToUpdate;
import java.io.File;
import com.laserfiche.api.client.model.GetDynamicFieldLogicValueRequest;
import com.laserfiche.api.client.model.GetEdocWithAuditReasonRequest;
import com.laserfiche.api.client.model.ODataValueContextOfIListOfFieldValue;
import com.laserfiche.api.client.model.ODataValueContextOfIListOfODataGetEntryChildren;
import com.laserfiche.api.client.model.ODataValueContextOfIListOfWEntryLinkInfo;
import com.laserfiche.api.client.model.ODataValueContextOfIListOfWTagInfo;
import com.laserfiche.api.client.model.ODataValueOfBoolean;
import com.laserfiche.api.client.model.ODataValueOfIListOfFieldValue;
import com.laserfiche.api.client.model.ODataValueOfIListOfWEntryLinkInfo;
import com.laserfiche.api.client.model.ODataValueOfIListOfWTagInfo;
import com.laserfiche.api.client.model.PatchEntryRequest;
import com.laserfiche.api.client.model.PostEntryChildrenRequest;
import com.laserfiche.api.client.model.PostEntryWithEdocMetadataRequest;
import com.laserfiche.api.client.model.ProblemDetails;
import com.laserfiche.api.client.model.PutLinksRequest;
import com.laserfiche.api.client.model.PutTagRequest;
import com.laserfiche.api.client.model.PutTemplateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EntriesApi {
    private ApiClient apiClient;

    public EntriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EntriesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for assignEntryLinks
     * @param repoId The request repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call assignEntryLinksCall(String repoId, Integer entryId, List<PutLinksRequest> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{entryId}/links"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assignEntryLinksValidateBeforeCall(String repoId, Integer entryId, List<PutLinksRequest> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling assignEntryLinks(Async)");
        }
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling assignEntryLinks(Async)");
        }
        
        com.squareup.okhttp.Call call = assignEntryLinksCall(repoId, entryId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Assign links to an entry. - Provide an entry ID and a list of links to assign to that entry. - This is an overwrite action. The request must include all links to assign to the entry, including existing links that should remain assigned to the entry.
     * @param repoId The request repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param body  (optional)
     * @return ODataValueOfIListOfWEntryLinkInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ODataValueOfIListOfWEntryLinkInfo assignEntryLinks(String repoId, Integer entryId, List<PutLinksRequest> body) throws ApiException {
        ApiResponse<ODataValueOfIListOfWEntryLinkInfo> resp = assignEntryLinksWithHttpInfo(repoId, entryId, body);
        return resp.getData();
    }

    /**
     * 
     * - Assign links to an entry. - Provide an entry ID and a list of links to assign to that entry. - This is an overwrite action. The request must include all links to assign to the entry, including existing links that should remain assigned to the entry.
     * @param repoId The request repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ODataValueOfIListOfWEntryLinkInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ODataValueOfIListOfWEntryLinkInfo> assignEntryLinksWithHttpInfo(String repoId, Integer entryId, List<PutLinksRequest> body) throws ApiException {
        com.squareup.okhttp.Call call = assignEntryLinksValidateBeforeCall(repoId, entryId, body, null, null);
        Type localVarReturnType = new TypeToken<ODataValueOfIListOfWEntryLinkInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Assign links to an entry. - Provide an entry ID and a list of links to assign to that entry. - This is an overwrite action. The request must include all links to assign to the entry, including existing links that should remain assigned to the entry.
     * @param repoId The request repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assignEntryLinksAsync(String repoId, Integer entryId, List<PutLinksRequest> body, final ApiCallback<ODataValueOfIListOfWEntryLinkInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assignEntryLinksValidateBeforeCall(repoId, entryId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ODataValueOfIListOfWEntryLinkInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for assignFieldValues
     * @param repoId The requested repository ID. (required)
     * @param entryId The entry ID of the entry that will have its fields updated. (required)
     * @param body  (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call assignFieldValuesCall(String repoId, Integer entryId, Map<String, FieldToUpdate> body, String culture, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{entryId}/fields"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (culture != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("culture", culture));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assignFieldValuesValidateBeforeCall(String repoId, Integer entryId, Map<String, FieldToUpdate> body, String culture, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling assignFieldValues(Async)");
        }
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling assignFieldValues(Async)");
        }
        
        com.squareup.okhttp.Call call = assignFieldValuesCall(repoId, entryId, body, culture, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Update field values assigned to an entry. - Provide the new field values to assign to the entry, and remove/reset all previously assigned field values.  - This is an overwrite action. The request body must include all desired field values, including any existing field values that should remain assigned to the entry. Field values that are not included in the request will be deleted from the entry. If the field value that is not included is part of a template, it will still be assigned (as required by the template), but its value will be reset.
     * @param repoId The requested repository ID. (required)
     * @param entryId The entry ID of the entry that will have its fields updated. (required)
     * @param body  (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @return ODataValueOfIListOfFieldValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ODataValueOfIListOfFieldValue assignFieldValues(String repoId, Integer entryId, Map<String, FieldToUpdate> body, String culture) throws ApiException {
        ApiResponse<ODataValueOfIListOfFieldValue> resp = assignFieldValuesWithHttpInfo(repoId, entryId, body, culture);
        return resp.getData();
    }

    /**
     * 
     * - Update field values assigned to an entry. - Provide the new field values to assign to the entry, and remove/reset all previously assigned field values.  - This is an overwrite action. The request body must include all desired field values, including any existing field values that should remain assigned to the entry. Field values that are not included in the request will be deleted from the entry. If the field value that is not included is part of a template, it will still be assigned (as required by the template), but its value will be reset.
     * @param repoId The requested repository ID. (required)
     * @param entryId The entry ID of the entry that will have its fields updated. (required)
     * @param body  (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @return ApiResponse&lt;ODataValueOfIListOfFieldValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ODataValueOfIListOfFieldValue> assignFieldValuesWithHttpInfo(String repoId, Integer entryId, Map<String, FieldToUpdate> body, String culture) throws ApiException {
        com.squareup.okhttp.Call call = assignFieldValuesValidateBeforeCall(repoId, entryId, body, culture, null, null);
        Type localVarReturnType = new TypeToken<ODataValueOfIListOfFieldValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Update field values assigned to an entry. - Provide the new field values to assign to the entry, and remove/reset all previously assigned field values.  - This is an overwrite action. The request body must include all desired field values, including any existing field values that should remain assigned to the entry. Field values that are not included in the request will be deleted from the entry. If the field value that is not included is part of a template, it will still be assigned (as required by the template), but its value will be reset.
     * @param repoId The requested repository ID. (required)
     * @param entryId The entry ID of the entry that will have its fields updated. (required)
     * @param body  (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assignFieldValuesAsync(String repoId, Integer entryId, Map<String, FieldToUpdate> body, String culture, final ApiCallback<ODataValueOfIListOfFieldValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assignFieldValuesValidateBeforeCall(repoId, entryId, body, culture, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ODataValueOfIListOfFieldValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for assignTags
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param body The tags to add. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call assignTagsCall(String repoId, Integer entryId, PutTagRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{entryId}/tags"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assignTagsValidateBeforeCall(String repoId, Integer entryId, PutTagRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling assignTags(Async)");
        }
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling assignTags(Async)");
        }
        
        com.squareup.okhttp.Call call = assignTagsCall(repoId, entryId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Assign tags to an entry. - Provide an entry ID and a list of tags to assign to that entry. - This is an overwrite action. The request must include all tags to assign to the entry, including existing tags that should remain assigned to the entry.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param body The tags to add. (optional)
     * @return ODataValueOfIListOfWTagInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ODataValueOfIListOfWTagInfo assignTags(String repoId, Integer entryId, PutTagRequest body) throws ApiException {
        ApiResponse<ODataValueOfIListOfWTagInfo> resp = assignTagsWithHttpInfo(repoId, entryId, body);
        return resp.getData();
    }

    /**
     * 
     * - Assign tags to an entry. - Provide an entry ID and a list of tags to assign to that entry. - This is an overwrite action. The request must include all tags to assign to the entry, including existing tags that should remain assigned to the entry.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param body The tags to add. (optional)
     * @return ApiResponse&lt;ODataValueOfIListOfWTagInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ODataValueOfIListOfWTagInfo> assignTagsWithHttpInfo(String repoId, Integer entryId, PutTagRequest body) throws ApiException {
        com.squareup.okhttp.Call call = assignTagsValidateBeforeCall(repoId, entryId, body, null, null);
        Type localVarReturnType = new TypeToken<ODataValueOfIListOfWTagInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Assign tags to an entry. - Provide an entry ID and a list of tags to assign to that entry. - This is an overwrite action. The request must include all tags to assign to the entry, including existing tags that should remain assigned to the entry.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param body The tags to add. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assignTagsAsync(String repoId, Integer entryId, PutTagRequest body, final ApiCallback<ODataValueOfIListOfWTagInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assignTagsValidateBeforeCall(repoId, entryId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ODataValueOfIListOfWTagInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for copyEntryAsync
     * @param repoId The requested repository ID. (required)
     * @param entryId The folder ID that the entry will be created in. (required)
     * @param body Copy entry request. (optional)
     * @param autoRename An optional query parameter used to indicate if the new entry should be automatically             renamed if an entry already exists with the given name in the folder. The default value is false. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copyEntryAsyncCall(String repoId, Integer entryId, CopyAsyncRequest body, Boolean autoRename, String culture, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{entryId}/Laserfiche.Repository.Folder/CopyAsync"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (autoRename != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("autoRename", autoRename));
        if (culture != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("culture", culture));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call copyEntryAsyncValidateBeforeCall(String repoId, Integer entryId, CopyAsyncRequest body, Boolean autoRename, String culture, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling copyEntryAsync(Async)");
        }
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling copyEntryAsync(Async)");
        }
        
        com.squareup.okhttp.Call call = copyEntryAsyncCall(repoId, entryId, body, autoRename, culture, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Copy a new child entry in the designated folder async, and potentially return an operationToken. - Provide the parent folder ID, and copy an entry as a child of the designated folder. - Optional parameter: autoRename (default false). If an entry already exists with the given name, the entry will be automatically renamed.  - The status of the operation can be checked via the Tasks/{operationToken} route.
     * @param repoId The requested repository ID. (required)
     * @param entryId The folder ID that the entry will be created in. (required)
     * @param body Copy entry request. (optional)
     * @param autoRename An optional query parameter used to indicate if the new entry should be automatically             renamed if an entry already exists with the given name in the folder. The default value is false. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @return AcceptedOperation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AcceptedOperation copyEntryAsync(String repoId, Integer entryId, CopyAsyncRequest body, Boolean autoRename, String culture) throws ApiException {
        ApiResponse<AcceptedOperation> resp = copyEntryAsyncWithHttpInfo(repoId, entryId, body, autoRename, culture);
        return resp.getData();
    }

    /**
     * 
     * - Copy a new child entry in the designated folder async, and potentially return an operationToken. - Provide the parent folder ID, and copy an entry as a child of the designated folder. - Optional parameter: autoRename (default false). If an entry already exists with the given name, the entry will be automatically renamed.  - The status of the operation can be checked via the Tasks/{operationToken} route.
     * @param repoId The requested repository ID. (required)
     * @param entryId The folder ID that the entry will be created in. (required)
     * @param body Copy entry request. (optional)
     * @param autoRename An optional query parameter used to indicate if the new entry should be automatically             renamed if an entry already exists with the given name in the folder. The default value is false. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @return ApiResponse&lt;AcceptedOperation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AcceptedOperation> copyEntryAsyncWithHttpInfo(String repoId, Integer entryId, CopyAsyncRequest body, Boolean autoRename, String culture) throws ApiException {
        com.squareup.okhttp.Call call = copyEntryAsyncValidateBeforeCall(repoId, entryId, body, autoRename, culture, null, null);
        Type localVarReturnType = new TypeToken<AcceptedOperation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Copy a new child entry in the designated folder async, and potentially return an operationToken. - Provide the parent folder ID, and copy an entry as a child of the designated folder. - Optional parameter: autoRename (default false). If an entry already exists with the given name, the entry will be automatically renamed.  - The status of the operation can be checked via the Tasks/{operationToken} route.
     * @param repoId The requested repository ID. (required)
     * @param entryId The folder ID that the entry will be created in. (required)
     * @param body Copy entry request. (optional)
     * @param autoRename An optional query parameter used to indicate if the new entry should be automatically             renamed if an entry already exists with the given name in the folder. The default value is false. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call copyEntryAsyncAsync(String repoId, Integer entryId, CopyAsyncRequest body, Boolean autoRename, String culture, final ApiCallback<AcceptedOperation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copyEntryAsyncValidateBeforeCall(repoId, entryId, body, autoRename, culture, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AcceptedOperation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createOrCopyEntry
     * @param repoId The requested repository ID. (required)
     * @param entryId The folder ID that the entry will be created in. (required)
     * @param body The entry to create. (optional)
     * @param autoRename An optional query parameter used to indicate if the new entry should be automatically             renamed if an entry already exists with the given name in the folder. The default value is false. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOrCopyEntryCall(String repoId, Integer entryId, PostEntryChildrenRequest body, Boolean autoRename, String culture, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{entryId}/Laserfiche.Repository.Folder/children"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (autoRename != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("autoRename", autoRename));
        if (culture != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("culture", culture));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOrCopyEntryValidateBeforeCall(String repoId, Integer entryId, PostEntryChildrenRequest body, Boolean autoRename, String culture, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling createOrCopyEntry(Async)");
        }
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling createOrCopyEntry(Async)");
        }
        
        com.squareup.okhttp.Call call = createOrCopyEntryCall(repoId, entryId, body, autoRename, culture, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Create/copy a new child entry in the designated folder. - Provide the parent folder ID, and based on the request body, copy or create a folder/shortcut as a child entry of the designated folder. - Optional parameter: autoRename (default false). If an entry already exists with the given name, the entry will be automatically renamed.
     * @param repoId The requested repository ID. (required)
     * @param entryId The folder ID that the entry will be created in. (required)
     * @param body The entry to create. (optional)
     * @param autoRename An optional query parameter used to indicate if the new entry should be automatically             renamed if an entry already exists with the given name in the folder. The default value is false. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @return Entry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Entry createOrCopyEntry(String repoId, Integer entryId, PostEntryChildrenRequest body, Boolean autoRename, String culture) throws ApiException {
        ApiResponse<Entry> resp = createOrCopyEntryWithHttpInfo(repoId, entryId, body, autoRename, culture);
        return resp.getData();
    }

    /**
     * 
     * - Create/copy a new child entry in the designated folder. - Provide the parent folder ID, and based on the request body, copy or create a folder/shortcut as a child entry of the designated folder. - Optional parameter: autoRename (default false). If an entry already exists with the given name, the entry will be automatically renamed.
     * @param repoId The requested repository ID. (required)
     * @param entryId The folder ID that the entry will be created in. (required)
     * @param body The entry to create. (optional)
     * @param autoRename An optional query parameter used to indicate if the new entry should be automatically             renamed if an entry already exists with the given name in the folder. The default value is false. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @return ApiResponse&lt;Entry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Entry> createOrCopyEntryWithHttpInfo(String repoId, Integer entryId, PostEntryChildrenRequest body, Boolean autoRename, String culture) throws ApiException {
        com.squareup.okhttp.Call call = createOrCopyEntryValidateBeforeCall(repoId, entryId, body, autoRename, culture, null, null);
        Type localVarReturnType = new TypeToken<Entry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Create/copy a new child entry in the designated folder. - Provide the parent folder ID, and based on the request body, copy or create a folder/shortcut as a child entry of the designated folder. - Optional parameter: autoRename (default false). If an entry already exists with the given name, the entry will be automatically renamed.
     * @param repoId The requested repository ID. (required)
     * @param entryId The folder ID that the entry will be created in. (required)
     * @param body The entry to create. (optional)
     * @param autoRename An optional query parameter used to indicate if the new entry should be automatically             renamed if an entry already exists with the given name in the folder. The default value is false. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOrCopyEntryAsync(String repoId, Integer entryId, PostEntryChildrenRequest body, Boolean autoRename, String culture, final ApiCallback<Entry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrCopyEntryValidateBeforeCall(repoId, entryId, body, autoRename, culture, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Entry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAssignedTemplate
     * @param repoId The requested repository ID. (required)
     * @param entryId The ID of the entry that will have its template removed. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAssignedTemplateCall(String repoId, Integer entryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{entryId}/template"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAssignedTemplateValidateBeforeCall(String repoId, Integer entryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling deleteAssignedTemplate(Async)");
        }
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling deleteAssignedTemplate(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAssignedTemplateCall(repoId, entryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Remove the currently assigned template from the specified entry. - Provide an entry ID to clear template value on. - If the entry does not have a template assigned, no change will be made.
     * @param repoId The requested repository ID. (required)
     * @param entryId The ID of the entry that will have its template removed. (required)
     * @return Entry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Entry deleteAssignedTemplate(String repoId, Integer entryId) throws ApiException {
        ApiResponse<Entry> resp = deleteAssignedTemplateWithHttpInfo(repoId, entryId);
        return resp.getData();
    }

    /**
     * 
     * - Remove the currently assigned template from the specified entry. - Provide an entry ID to clear template value on. - If the entry does not have a template assigned, no change will be made.
     * @param repoId The requested repository ID. (required)
     * @param entryId The ID of the entry that will have its template removed. (required)
     * @return ApiResponse&lt;Entry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Entry> deleteAssignedTemplateWithHttpInfo(String repoId, Integer entryId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAssignedTemplateValidateBeforeCall(repoId, entryId, null, null);
        Type localVarReturnType = new TypeToken<Entry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Remove the currently assigned template from the specified entry. - Provide an entry ID to clear template value on. - If the entry does not have a template assigned, no change will be made.
     * @param repoId The requested repository ID. (required)
     * @param entryId The ID of the entry that will have its template removed. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAssignedTemplateAsync(String repoId, Integer entryId, final ApiCallback<Entry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAssignedTemplateValidateBeforeCall(repoId, entryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Entry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDocument
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested document ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentCall(String repoId, Integer entryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{entryId}/Laserfiche.Repository.Document/edoc"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDocumentValidateBeforeCall(String repoId, Integer entryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling deleteDocument(Async)");
        }
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling deleteDocument(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDocumentCall(repoId, entryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Delete the edoc associated with the provided entry ID.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested document ID. (required)
     * @return ODataValueOfBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ODataValueOfBoolean deleteDocument(String repoId, Integer entryId) throws ApiException {
        ApiResponse<ODataValueOfBoolean> resp = deleteDocumentWithHttpInfo(repoId, entryId);
        return resp.getData();
    }

    /**
     * 
     * - Delete the edoc associated with the provided entry ID.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested document ID. (required)
     * @return ApiResponse&lt;ODataValueOfBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ODataValueOfBoolean> deleteDocumentWithHttpInfo(String repoId, Integer entryId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDocumentValidateBeforeCall(repoId, entryId, null, null);
        Type localVarReturnType = new TypeToken<ODataValueOfBoolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Delete the edoc associated with the provided entry ID.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested document ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentAsync(String repoId, Integer entryId, final ApiCallback<ODataValueOfBoolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDocumentValidateBeforeCall(repoId, entryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ODataValueOfBoolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEntryInfo
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param body The submitted audit reason. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEntryInfoCall(String repoId, Integer entryId, DeleteEntryWithAuditReason body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{entryId}"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEntryInfoValidateBeforeCall(String repoId, Integer entryId, DeleteEntryWithAuditReason body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling deleteEntryInfo(Async)");
        }
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling deleteEntryInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteEntryInfoCall(repoId, entryId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Begins a task to delete an entry, and returns an operationToken. - Provide an entry ID, and queue a delete task to remove it from the repository (includes nested objects if the entry is a Folder type). The entry will not be deleted immediately. - Optionally include an audit reason ID and comment in the JSON body. This route returns an operationToken, and will run as an asynchronous operation. Check the progress via the Tasks/{operationToken} route.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param body The submitted audit reason. (optional)
     * @return AcceptedOperation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AcceptedOperation deleteEntryInfo(String repoId, Integer entryId, DeleteEntryWithAuditReason body) throws ApiException {
        ApiResponse<AcceptedOperation> resp = deleteEntryInfoWithHttpInfo(repoId, entryId, body);
        return resp.getData();
    }

    /**
     * 
     * - Begins a task to delete an entry, and returns an operationToken. - Provide an entry ID, and queue a delete task to remove it from the repository (includes nested objects if the entry is a Folder type). The entry will not be deleted immediately. - Optionally include an audit reason ID and comment in the JSON body. This route returns an operationToken, and will run as an asynchronous operation. Check the progress via the Tasks/{operationToken} route.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param body The submitted audit reason. (optional)
     * @return ApiResponse&lt;AcceptedOperation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AcceptedOperation> deleteEntryInfoWithHttpInfo(String repoId, Integer entryId, DeleteEntryWithAuditReason body) throws ApiException {
        com.squareup.okhttp.Call call = deleteEntryInfoValidateBeforeCall(repoId, entryId, body, null, null);
        Type localVarReturnType = new TypeToken<AcceptedOperation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Begins a task to delete an entry, and returns an operationToken. - Provide an entry ID, and queue a delete task to remove it from the repository (includes nested objects if the entry is a Folder type). The entry will not be deleted immediately. - Optionally include an audit reason ID and comment in the JSON body. This route returns an operationToken, and will run as an asynchronous operation. Check the progress via the Tasks/{operationToken} route.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param body The submitted audit reason. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEntryInfoAsync(String repoId, Integer entryId, DeleteEntryWithAuditReason body, final ApiCallback<AcceptedOperation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEntryInfoValidateBeforeCall(repoId, entryId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AcceptedOperation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePages
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested document ID. (required)
     * @param pageRange The pages to be deleted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePagesCall(String repoId, Integer entryId, String pageRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{entryId}/Laserfiche.Repository.Document/pages"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageRange != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageRange", pageRange));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePagesValidateBeforeCall(String repoId, Integer entryId, String pageRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling deletePages(Async)");
        }
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling deletePages(Async)");
        }
        
        com.squareup.okhttp.Call call = deletePagesCall(repoId, entryId, pageRange, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Delete the pages associated with the provided entry ID. If no pageRange is specified, all pages will be deleted. - Optional parameter: pageRange (default empty). The value should be a comma-seperated string which contains non-overlapping single values, or page ranges. Ex: \&quot;1,2,3\&quot;, \&quot;1-3,5\&quot;, \&quot;2-7,10-12.\&quot;
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested document ID. (required)
     * @param pageRange The pages to be deleted. (optional)
     * @return ODataValueOfBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ODataValueOfBoolean deletePages(String repoId, Integer entryId, String pageRange) throws ApiException {
        ApiResponse<ODataValueOfBoolean> resp = deletePagesWithHttpInfo(repoId, entryId, pageRange);
        return resp.getData();
    }

    /**
     * 
     * - Delete the pages associated with the provided entry ID. If no pageRange is specified, all pages will be deleted. - Optional parameter: pageRange (default empty). The value should be a comma-seperated string which contains non-overlapping single values, or page ranges. Ex: \&quot;1,2,3\&quot;, \&quot;1-3,5\&quot;, \&quot;2-7,10-12.\&quot;
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested document ID. (required)
     * @param pageRange The pages to be deleted. (optional)
     * @return ApiResponse&lt;ODataValueOfBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ODataValueOfBoolean> deletePagesWithHttpInfo(String repoId, Integer entryId, String pageRange) throws ApiException {
        com.squareup.okhttp.Call call = deletePagesValidateBeforeCall(repoId, entryId, pageRange, null, null);
        Type localVarReturnType = new TypeToken<ODataValueOfBoolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Delete the pages associated with the provided entry ID. If no pageRange is specified, all pages will be deleted. - Optional parameter: pageRange (default empty). The value should be a comma-seperated string which contains non-overlapping single values, or page ranges. Ex: \&quot;1,2,3\&quot;, \&quot;1-3,5\&quot;, \&quot;2-7,10-12.\&quot;
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested document ID. (required)
     * @param pageRange The pages to be deleted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePagesAsync(String repoId, Integer entryId, String pageRange, final ApiCallback<ODataValueOfBoolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePagesValidateBeforeCall(repoId, entryId, pageRange, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ODataValueOfBoolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for exportDocument
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested document ID. (required)
     * @param range An optional header used to retrieve partial content of the edoc. Only supports single             range with byte unit. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call exportDocumentCall(String repoId, Integer entryId, String range, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{entryId}/Laserfiche.Repository.Document/edoc"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (range != null)
        localVarHeaderParams.put("Range", apiClient.parameterToString(range));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportDocumentValidateBeforeCall(String repoId, Integer entryId, String range, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling exportDocument(Async)");
        }
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling exportDocument(Async)");
        }
        
        com.squareup.okhttp.Call call = exportDocumentCall(repoId, entryId, range, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Get an entry&#x27;s edoc resource in a stream format. - Provide an entry ID, and get the edoc resource as part of the response content. - Optional header: Range. Use the Range header (single range with byte unit) to retrieve partial content of the edoc, rather than the entire edoc.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested document ID. (required)
     * @param range An optional header used to retrieve partial content of the edoc. Only supports single             range with byte unit. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File exportDocument(String repoId, Integer entryId, String range) throws ApiException {
        ApiResponse<File> resp = exportDocumentWithHttpInfo(repoId, entryId, range);
        return resp.getData();
    }

    /**
     * 
     * - Get an entry&#x27;s edoc resource in a stream format. - Provide an entry ID, and get the edoc resource as part of the response content. - Optional header: Range. Use the Range header (single range with byte unit) to retrieve partial content of the edoc, rather than the entire edoc.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested document ID. (required)
     * @param range An optional header used to retrieve partial content of the edoc. Only supports single             range with byte unit. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> exportDocumentWithHttpInfo(String repoId, Integer entryId, String range) throws ApiException {
        com.squareup.okhttp.Call call = exportDocumentValidateBeforeCall(repoId, entryId, range, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Get an entry&#x27;s edoc resource in a stream format. - Provide an entry ID, and get the edoc resource as part of the response content. - Optional header: Range. Use the Range header (single range with byte unit) to retrieve partial content of the edoc, rather than the entire edoc.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested document ID. (required)
     * @param range An optional header used to retrieve partial content of the edoc. Only supports single             range with byte unit. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportDocumentAsync(String repoId, Integer entryId, String range, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportDocumentValidateBeforeCall(repoId, entryId, range, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for exportDocumentWithAuditReason
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested document ID. (required)
     * @param body  (optional)
     * @param range An optional header used to retrieve partial content of the edoc. Only supports single             range with byte unit. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call exportDocumentWithAuditReasonCall(String repoId, Integer entryId, GetEdocWithAuditReasonRequest body, String range, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{entryId}/Laserfiche.Repository.Document/GetEdocWithAuditReason"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (range != null)
        localVarHeaderParams.put("Range", apiClient.parameterToString(range));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportDocumentWithAuditReasonValidateBeforeCall(String repoId, Integer entryId, GetEdocWithAuditReasonRequest body, String range, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling exportDocumentWithAuditReason(Async)");
        }
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling exportDocumentWithAuditReason(Async)");
        }
        
        com.squareup.okhttp.Call call = exportDocumentWithAuditReasonCall(repoId, entryId, body, range, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Get an entry&#x27;s edoc resource in a stream format while including an audit reason. - Provide an entry ID and audit reason/comment in the request body, and get the edoc resource as part of the response content. - Optional header: Range. Use the Range header (single range with byte unit) to retrieve partial content of the edoc, rather than the entire edoc. This route is identical to the GET edoc route, but allows clients to include an audit reason when downloading the edoc.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested document ID. (required)
     * @param body  (optional)
     * @param range An optional header used to retrieve partial content of the edoc. Only supports single             range with byte unit. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File exportDocumentWithAuditReason(String repoId, Integer entryId, GetEdocWithAuditReasonRequest body, String range) throws ApiException {
        ApiResponse<File> resp = exportDocumentWithAuditReasonWithHttpInfo(repoId, entryId, body, range);
        return resp.getData();
    }

    /**
     * 
     * - Get an entry&#x27;s edoc resource in a stream format while including an audit reason. - Provide an entry ID and audit reason/comment in the request body, and get the edoc resource as part of the response content. - Optional header: Range. Use the Range header (single range with byte unit) to retrieve partial content of the edoc, rather than the entire edoc. This route is identical to the GET edoc route, but allows clients to include an audit reason when downloading the edoc.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested document ID. (required)
     * @param body  (optional)
     * @param range An optional header used to retrieve partial content of the edoc. Only supports single             range with byte unit. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> exportDocumentWithAuditReasonWithHttpInfo(String repoId, Integer entryId, GetEdocWithAuditReasonRequest body, String range) throws ApiException {
        com.squareup.okhttp.Call call = exportDocumentWithAuditReasonValidateBeforeCall(repoId, entryId, body, range, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Get an entry&#x27;s edoc resource in a stream format while including an audit reason. - Provide an entry ID and audit reason/comment in the request body, and get the edoc resource as part of the response content. - Optional header: Range. Use the Range header (single range with byte unit) to retrieve partial content of the edoc, rather than the entire edoc. This route is identical to the GET edoc route, but allows clients to include an audit reason when downloading the edoc.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested document ID. (required)
     * @param body  (optional)
     * @param range An optional header used to retrieve partial content of the edoc. Only supports single             range with byte unit. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportDocumentWithAuditReasonAsync(String repoId, Integer entryId, GetEdocWithAuditReasonRequest body, String range, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportDocumentWithAuditReasonValidateBeforeCall(repoId, entryId, body, range, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentContentType
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested document ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentContentTypeCall(String repoId, Integer entryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{entryId}/Laserfiche.Repository.Document/edoc"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentContentTypeValidateBeforeCall(String repoId, Integer entryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling getDocumentContentType(Async)");
        }
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling getDocumentContentType(Async)");
        }
        
        com.squareup.okhttp.Call call = getDocumentContentTypeCall(repoId, entryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Get information about the edoc content of an entry, without downloading the edoc in its entirety. - Provide an entry ID, and get back the Content-Type and Content-Length in the response headers. - This route does not provide a way to download the actual edoc. Instead, it just gives metadata information about the edoc associated with the entry.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested document ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getDocumentContentType(String repoId, Integer entryId) throws ApiException {
        getDocumentContentTypeWithHttpInfo(repoId, entryId);
    }

    /**
     * 
     * - Get information about the edoc content of an entry, without downloading the edoc in its entirety. - Provide an entry ID, and get back the Content-Type and Content-Length in the response headers. - This route does not provide a way to download the actual edoc. Instead, it just gives metadata information about the edoc associated with the entry.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested document ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getDocumentContentTypeWithHttpInfo(String repoId, Integer entryId) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentContentTypeValidateBeforeCall(repoId, entryId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * - Get information about the edoc content of an entry, without downloading the edoc in its entirety. - Provide an entry ID, and get back the Content-Type and Content-Length in the response headers. - This route does not provide a way to download the actual edoc. Instead, it just gives metadata information about the edoc associated with the entry.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested document ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentContentTypeAsync(String repoId, Integer entryId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentContentTypeValidateBeforeCall(repoId, entryId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDynamicFieldValues
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDynamicFieldValuesCall(String repoId, Integer entryId, GetDynamicFieldLogicValueRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{entryId}/fields/GetDynamicFieldLogicValue"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDynamicFieldValuesValidateBeforeCall(String repoId, Integer entryId, GetDynamicFieldLogicValueRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling getDynamicFieldValues(Async)");
        }
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling getDynamicFieldValues(Async)");
        }
        
        com.squareup.okhttp.Call call = getDynamicFieldValuesCall(repoId, entryId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Get dynamic field logic values with the current values of the fields in the template. - Provide an entry ID and field values in the JSON body to get dynamic field logic values.  Independent and non-dynamic fields in the request body will be ignored, and only related dynamic field logic values for the assigned template will be returned.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param body  (optional)
     * @return Map&lt;String, List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, List<String>> getDynamicFieldValues(String repoId, Integer entryId, GetDynamicFieldLogicValueRequest body) throws ApiException {
        ApiResponse<Map<String, List<String>>> resp = getDynamicFieldValuesWithHttpInfo(repoId, entryId, body);
        return resp.getData();
    }

    /**
     * 
     * - Get dynamic field logic values with the current values of the fields in the template. - Provide an entry ID and field values in the JSON body to get dynamic field logic values.  Independent and non-dynamic fields in the request body will be ignored, and only related dynamic field logic values for the assigned template will be returned.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Map&lt;String, List&lt;String&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, List<String>>> getDynamicFieldValuesWithHttpInfo(String repoId, Integer entryId, GetDynamicFieldLogicValueRequest body) throws ApiException {
        com.squareup.okhttp.Call call = getDynamicFieldValuesValidateBeforeCall(repoId, entryId, body, null, null);
        Type localVarReturnType = new TypeToken<Map<String, List<String>>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Get dynamic field logic values with the current values of the fields in the template. - Provide an entry ID and field values in the JSON body to get dynamic field logic values.  Independent and non-dynamic fields in the request body will be ignored, and only related dynamic field logic values for the assigned template will be returned.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDynamicFieldValuesAsync(String repoId, Integer entryId, GetDynamicFieldLogicValueRequest body, final ApiCallback<Map<String, List<String>>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDynamicFieldValuesValidateBeforeCall(repoId, entryId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, List<String>>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEntry
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param $select Limits the properties returned in the result. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEntryCall(String repoId, Integer entryId, String $select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{entryId}"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if ($select != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$select", $select));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEntryValidateBeforeCall(String repoId, Integer entryId, String $select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling getEntry(Async)");
        }
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling getEntry(Async)");
        }
        
        com.squareup.okhttp.Call call = getEntryCall(repoId, entryId, $select, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Returns a single entry object. - Provide an entry ID, and get the entry associated with that ID. Useful when detailed information about the entry is required, such as metadata, path information, etc. - Allowed OData query options: Select. If the entry is a subtype (Folder, Document, or Shortcut), the entry will automatically be converted to include those model-specific properties.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param $select Limits the properties returned in the result. (optional)
     * @return Entry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Entry getEntry(String repoId, Integer entryId, String $select) throws ApiException {
        ApiResponse<Entry> resp = getEntryWithHttpInfo(repoId, entryId, $select);
        return resp.getData();
    }

    /**
     * 
     * - Returns a single entry object. - Provide an entry ID, and get the entry associated with that ID. Useful when detailed information about the entry is required, such as metadata, path information, etc. - Allowed OData query options: Select. If the entry is a subtype (Folder, Document, or Shortcut), the entry will automatically be converted to include those model-specific properties.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param $select Limits the properties returned in the result. (optional)
     * @return ApiResponse&lt;Entry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Entry> getEntryWithHttpInfo(String repoId, Integer entryId, String $select) throws ApiException {
        com.squareup.okhttp.Call call = getEntryValidateBeforeCall(repoId, entryId, $select, null, null);
        Type localVarReturnType = new TypeToken<Entry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Returns a single entry object. - Provide an entry ID, and get the entry associated with that ID. Useful when detailed information about the entry is required, such as metadata, path information, etc. - Allowed OData query options: Select. If the entry is a subtype (Folder, Document, or Shortcut), the entry will automatically be converted to include those model-specific properties.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param $select Limits the properties returned in the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEntryAsync(String repoId, Integer entryId, String $select, final ApiCallback<Entry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEntryValidateBeforeCall(repoId, entryId, $select, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Entry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEntryListing
     * @param repoId The requested repository ID. (required)
     * @param entryId The folder ID. (required)
     * @param groupByEntryType An optional query parameter used to indicate if the result should be grouped by entry type or not. (optional)
     * @param fields Optional array of field names. Field values corresponding to the given field names will be returned for each entry.  (optional)
     * @param formatFields Boolean for if field values should be formatted. Only applicable if Fields are specified. (optional)
     * @param prefer An optional OData header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used for formatting.             The value should be a standard language tag. The formatFields query parameter must be set to true, otherwise             culture will not be used for formatting. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEntryListingCall(String repoId, Integer entryId, Boolean groupByEntryType, List<String> fields, Boolean formatFields, String prefer, String culture, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{entryId}/Laserfiche.Repository.Folder/children"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (groupByEntryType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupByEntryType", groupByEntryType));
        if (fields != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "fields", fields));
        if (formatFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("formatFields", formatFields));
        if (culture != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("culture", culture));
        if ($select != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$select", $select));
        if ($orderby != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$orderby", $orderby));
        if ($top != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$top", $top));
        if ($skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$skip", $skip));
        if ($count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$count", $count));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (prefer != null)
        localVarHeaderParams.put("Prefer", apiClient.parameterToString(prefer));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEntryListingValidateBeforeCall(String repoId, Integer entryId, Boolean groupByEntryType, List<String> fields, Boolean formatFields, String prefer, String culture, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling getEntryListing(Async)");
        }
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling getEntryListing(Async)");
        }
        
        com.squareup.okhttp.Call call = getEntryListingCall(repoId, entryId, groupByEntryType, fields, formatFields, prefer, culture, $select, $orderby, $top, $skip, $count, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Returns the children entries of a folder in the repository. - Provide an entry ID (must be a folder), and get a paged listing of entries in that folder. Used as a way of navigating through the repository. - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer. OData $OrderBy syntax should follow: \&quot;PropertyName direction,PropertyName2 direction\&quot;. Sort order can be either value \&quot;asc\&quot; or \&quot;desc\&quot;. Optional query parameters: groupByOrderType (bool). This query parameter decides if results are returned in groups based on their entry type. Entries returned in the listing are not automatically converted to their subtype (Folder, Shortcut, Document), so clients who want model-specific information should request it via the GET entry by ID route. - Optionally returns field values for the entries in the folder. Each field name needs to be specified in the request. Maximum limit of 10 field names. - If field values are requested, only the first value is returned if it is a multi value field. - Null or Empty field values should not be used to determine if a field is assigned to the entry.
     * @param repoId The requested repository ID. (required)
     * @param entryId The folder ID. (required)
     * @param groupByEntryType An optional query parameter used to indicate if the result should be grouped by entry type or not. (optional)
     * @param fields Optional array of field names. Field values corresponding to the given field names will be returned for each entry.  (optional)
     * @param formatFields Boolean for if field values should be formatted. Only applicable if Fields are specified. (optional)
     * @param prefer An optional OData header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used for formatting.             The value should be a standard language tag. The formatFields query parameter must be set to true, otherwise             culture will not be used for formatting. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @return ODataValueContextOfIListOfODataGetEntryChildren
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ODataValueContextOfIListOfODataGetEntryChildren getEntryListing(String repoId, Integer entryId, Boolean groupByEntryType, List<String> fields, Boolean formatFields, String prefer, String culture, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count) throws ApiException {
        ApiResponse<ODataValueContextOfIListOfODataGetEntryChildren> resp = getEntryListingWithHttpInfo(repoId, entryId, groupByEntryType, fields, formatFields, prefer, culture, $select, $orderby, $top, $skip, $count);
        return resp.getData();
    }

    /**
     * 
     * - Returns the children entries of a folder in the repository. - Provide an entry ID (must be a folder), and get a paged listing of entries in that folder. Used as a way of navigating through the repository. - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer. OData $OrderBy syntax should follow: \&quot;PropertyName direction,PropertyName2 direction\&quot;. Sort order can be either value \&quot;asc\&quot; or \&quot;desc\&quot;. Optional query parameters: groupByOrderType (bool). This query parameter decides if results are returned in groups based on their entry type. Entries returned in the listing are not automatically converted to their subtype (Folder, Shortcut, Document), so clients who want model-specific information should request it via the GET entry by ID route. - Optionally returns field values for the entries in the folder. Each field name needs to be specified in the request. Maximum limit of 10 field names. - If field values are requested, only the first value is returned if it is a multi value field. - Null or Empty field values should not be used to determine if a field is assigned to the entry.
     * @param repoId The requested repository ID. (required)
     * @param entryId The folder ID. (required)
     * @param groupByEntryType An optional query parameter used to indicate if the result should be grouped by entry type or not. (optional)
     * @param fields Optional array of field names. Field values corresponding to the given field names will be returned for each entry.  (optional)
     * @param formatFields Boolean for if field values should be formatted. Only applicable if Fields are specified. (optional)
     * @param prefer An optional OData header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used for formatting.             The value should be a standard language tag. The formatFields query parameter must be set to true, otherwise             culture will not be used for formatting. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @return ApiResponse&lt;ODataValueContextOfIListOfODataGetEntryChildren&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ODataValueContextOfIListOfODataGetEntryChildren> getEntryListingWithHttpInfo(String repoId, Integer entryId, Boolean groupByEntryType, List<String> fields, Boolean formatFields, String prefer, String culture, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count) throws ApiException {
        com.squareup.okhttp.Call call = getEntryListingValidateBeforeCall(repoId, entryId, groupByEntryType, fields, formatFields, prefer, culture, $select, $orderby, $top, $skip, $count, null, null);
        Type localVarReturnType = new TypeToken<ODataValueContextOfIListOfODataGetEntryChildren>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Returns the children entries of a folder in the repository. - Provide an entry ID (must be a folder), and get a paged listing of entries in that folder. Used as a way of navigating through the repository. - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer. OData $OrderBy syntax should follow: \&quot;PropertyName direction,PropertyName2 direction\&quot;. Sort order can be either value \&quot;asc\&quot; or \&quot;desc\&quot;. Optional query parameters: groupByOrderType (bool). This query parameter decides if results are returned in groups based on their entry type. Entries returned in the listing are not automatically converted to their subtype (Folder, Shortcut, Document), so clients who want model-specific information should request it via the GET entry by ID route. - Optionally returns field values for the entries in the folder. Each field name needs to be specified in the request. Maximum limit of 10 field names. - If field values are requested, only the first value is returned if it is a multi value field. - Null or Empty field values should not be used to determine if a field is assigned to the entry.
     * @param repoId The requested repository ID. (required)
     * @param entryId The folder ID. (required)
     * @param groupByEntryType An optional query parameter used to indicate if the result should be grouped by entry type or not. (optional)
     * @param fields Optional array of field names. Field values corresponding to the given field names will be returned for each entry.  (optional)
     * @param formatFields Boolean for if field values should be formatted. Only applicable if Fields are specified. (optional)
     * @param prefer An optional OData header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used for formatting.             The value should be a standard language tag. The formatFields query parameter must be set to true, otherwise             culture will not be used for formatting. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEntryListingAsync(String repoId, Integer entryId, Boolean groupByEntryType, List<String> fields, Boolean formatFields, String prefer, String culture, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ApiCallback<ODataValueContextOfIListOfODataGetEntryChildren> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEntryListingValidateBeforeCall(repoId, entryId, groupByEntryType, fields, formatFields, prefer, culture, $select, $orderby, $top, $skip, $count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ODataValueContextOfIListOfODataGetEntryChildren>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFieldValues
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param prefer An optional OData header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param formatValue An optional query parameter used to indicate if the field values should be formatted.             The default value is false. (optional, default to false)
     * @param culture An optional query parameter used to indicate the locale that should be used for formatting.             The value should be a standard language tag. The formatValue query parameter must be set to true, otherwise             culture will not be used for formatting. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFieldValuesCall(String repoId, Integer entryId, String prefer, Boolean formatValue, String culture, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{entryId}/fields"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (formatValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("formatValue", formatValue));
        if (culture != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("culture", culture));
        if ($select != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$select", $select));
        if ($orderby != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$orderby", $orderby));
        if ($top != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$top", $top));
        if ($skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$skip", $skip));
        if ($count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$count", $count));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (prefer != null)
        localVarHeaderParams.put("Prefer", apiClient.parameterToString(prefer));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFieldValuesValidateBeforeCall(String repoId, Integer entryId, String prefer, Boolean formatValue, String culture, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling getFieldValues(Async)");
        }
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling getFieldValues(Async)");
        }
        
        com.squareup.okhttp.Call call = getFieldValuesCall(repoId, entryId, prefer, formatValue, culture, $select, $orderby, $top, $skip, $count, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Returns the fields assigned to an entry. - Provide an entry ID, and get a paged listing of all fields assigned to that entry. - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param prefer An optional OData header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param formatValue An optional query parameter used to indicate if the field values should be formatted.             The default value is false. (optional, default to false)
     * @param culture An optional query parameter used to indicate the locale that should be used for formatting.             The value should be a standard language tag. The formatValue query parameter must be set to true, otherwise             culture will not be used for formatting. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @return ODataValueContextOfIListOfFieldValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ODataValueContextOfIListOfFieldValue getFieldValues(String repoId, Integer entryId, String prefer, Boolean formatValue, String culture, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count) throws ApiException {
        ApiResponse<ODataValueContextOfIListOfFieldValue> resp = getFieldValuesWithHttpInfo(repoId, entryId, prefer, formatValue, culture, $select, $orderby, $top, $skip, $count);
        return resp.getData();
    }

    /**
     * 
     * - Returns the fields assigned to an entry. - Provide an entry ID, and get a paged listing of all fields assigned to that entry. - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param prefer An optional OData header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param formatValue An optional query parameter used to indicate if the field values should be formatted.             The default value is false. (optional, default to false)
     * @param culture An optional query parameter used to indicate the locale that should be used for formatting.             The value should be a standard language tag. The formatValue query parameter must be set to true, otherwise             culture will not be used for formatting. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @return ApiResponse&lt;ODataValueContextOfIListOfFieldValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ODataValueContextOfIListOfFieldValue> getFieldValuesWithHttpInfo(String repoId, Integer entryId, String prefer, Boolean formatValue, String culture, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count) throws ApiException {
        com.squareup.okhttp.Call call = getFieldValuesValidateBeforeCall(repoId, entryId, prefer, formatValue, culture, $select, $orderby, $top, $skip, $count, null, null);
        Type localVarReturnType = new TypeToken<ODataValueContextOfIListOfFieldValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Returns the fields assigned to an entry. - Provide an entry ID, and get a paged listing of all fields assigned to that entry. - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param prefer An optional OData header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param formatValue An optional query parameter used to indicate if the field values should be formatted.             The default value is false. (optional, default to false)
     * @param culture An optional query parameter used to indicate the locale that should be used for formatting.             The value should be a standard language tag. The formatValue query parameter must be set to true, otherwise             culture will not be used for formatting. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFieldValuesAsync(String repoId, Integer entryId, String prefer, Boolean formatValue, String culture, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ApiCallback<ODataValueContextOfIListOfFieldValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFieldValuesValidateBeforeCall(repoId, entryId, prefer, formatValue, culture, $select, $orderby, $top, $skip, $count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ODataValueContextOfIListOfFieldValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLinkValuesFromEntry
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param prefer An optional odata header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLinkValuesFromEntryCall(String repoId, Integer entryId, String prefer, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{entryId}/links"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if ($select != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$select", $select));
        if ($orderby != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$orderby", $orderby));
        if ($top != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$top", $top));
        if ($skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$skip", $skip));
        if ($count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$count", $count));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (prefer != null)
        localVarHeaderParams.put("Prefer", apiClient.parameterToString(prefer));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLinkValuesFromEntryValidateBeforeCall(String repoId, Integer entryId, String prefer, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling getLinkValuesFromEntry(Async)");
        }
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling getLinkValuesFromEntry(Async)");
        }
        
        com.squareup.okhttp.Call call = getLinkValuesFromEntryCall(repoId, entryId, prefer, $select, $orderby, $top, $skip, $count, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Get the links assigned to an entry. - Provide an entry ID, and get a paged listing of links assigned to that entry. - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param prefer An optional odata header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @return ODataValueContextOfIListOfWEntryLinkInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ODataValueContextOfIListOfWEntryLinkInfo getLinkValuesFromEntry(String repoId, Integer entryId, String prefer, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count) throws ApiException {
        ApiResponse<ODataValueContextOfIListOfWEntryLinkInfo> resp = getLinkValuesFromEntryWithHttpInfo(repoId, entryId, prefer, $select, $orderby, $top, $skip, $count);
        return resp.getData();
    }

    /**
     * 
     * - Get the links assigned to an entry. - Provide an entry ID, and get a paged listing of links assigned to that entry. - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param prefer An optional odata header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @return ApiResponse&lt;ODataValueContextOfIListOfWEntryLinkInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ODataValueContextOfIListOfWEntryLinkInfo> getLinkValuesFromEntryWithHttpInfo(String repoId, Integer entryId, String prefer, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count) throws ApiException {
        com.squareup.okhttp.Call call = getLinkValuesFromEntryValidateBeforeCall(repoId, entryId, prefer, $select, $orderby, $top, $skip, $count, null, null);
        Type localVarReturnType = new TypeToken<ODataValueContextOfIListOfWEntryLinkInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Get the links assigned to an entry. - Provide an entry ID, and get a paged listing of links assigned to that entry. - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param prefer An optional odata header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLinkValuesFromEntryAsync(String repoId, Integer entryId, String prefer, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ApiCallback<ODataValueContextOfIListOfWEntryLinkInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLinkValuesFromEntryValidateBeforeCall(repoId, entryId, prefer, $select, $orderby, $top, $skip, $count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ODataValueContextOfIListOfWEntryLinkInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTagsAssignedToEntry
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param prefer An optional OData header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTagsAssignedToEntryCall(String repoId, Integer entryId, String prefer, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{entryId}/tags"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if ($select != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$select", $select));
        if ($orderby != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$orderby", $orderby));
        if ($top != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$top", $top));
        if ($skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$skip", $skip));
        if ($count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$count", $count));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (prefer != null)
        localVarHeaderParams.put("Prefer", apiClient.parameterToString(prefer));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTagsAssignedToEntryValidateBeforeCall(String repoId, Integer entryId, String prefer, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling getTagsAssignedToEntry(Async)");
        }
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling getTagsAssignedToEntry(Async)");
        }
        
        com.squareup.okhttp.Call call = getTagsAssignedToEntryCall(repoId, entryId, prefer, $select, $orderby, $top, $skip, $count, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Get the tags assigned to an entry. - Provide an entry ID, and get a paged listing of tags assigned to that entry. - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param prefer An optional OData header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @return ODataValueContextOfIListOfWTagInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ODataValueContextOfIListOfWTagInfo getTagsAssignedToEntry(String repoId, Integer entryId, String prefer, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count) throws ApiException {
        ApiResponse<ODataValueContextOfIListOfWTagInfo> resp = getTagsAssignedToEntryWithHttpInfo(repoId, entryId, prefer, $select, $orderby, $top, $skip, $count);
        return resp.getData();
    }

    /**
     * 
     * - Get the tags assigned to an entry. - Provide an entry ID, and get a paged listing of tags assigned to that entry. - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param prefer An optional OData header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @return ApiResponse&lt;ODataValueContextOfIListOfWTagInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ODataValueContextOfIListOfWTagInfo> getTagsAssignedToEntryWithHttpInfo(String repoId, Integer entryId, String prefer, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count) throws ApiException {
        com.squareup.okhttp.Call call = getTagsAssignedToEntryValidateBeforeCall(repoId, entryId, prefer, $select, $orderby, $top, $skip, $count, null, null);
        Type localVarReturnType = new TypeToken<ODataValueContextOfIListOfWTagInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Get the tags assigned to an entry. - Provide an entry ID, and get a paged listing of tags assigned to that entry. - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param prefer An optional OData header. Can be used to set the maximum page size using odata.maxpagesize. (optional)
     * @param $select Limits the properties returned in the result. (optional)
     * @param $orderby Specifies the order in which items are returned. The maximum number of expressions is 5. (optional)
     * @param $top Limits the number of items returned from a collection. (optional)
     * @param $skip Excludes the specified number of items of the queried collection from the result. (optional)
     * @param $count Indicates whether the total count of items within a collection are returned in the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTagsAssignedToEntryAsync(String repoId, Integer entryId, String prefer, String $select, String $orderby, Integer $top, Integer $skip, Boolean $count, final ApiCallback<ODataValueContextOfIListOfWTagInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTagsAssignedToEntryValidateBeforeCall(repoId, entryId, prefer, $select, $orderby, $top, $skip, $count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ODataValueContextOfIListOfWTagInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importDocument
     * @param repoId The requested repository ID. (required)
     * @param parentEntryId The entry ID of the folder that the document will be created in. (required)
     * @param fileName The created document&#x27;s file name. (required)
     * @param electronicDocument  (optional)
     * @param request  (optional)
     * @param autoRename An optional query parameter used to indicate if the new document should be automatically             renamed if an entry already exists with the given name in the folder. The default value is false. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importDocumentCall(String repoId, Integer parentEntryId, String fileName, File electronicDocument, PostEntryWithEdocMetadataRequest request, Boolean autoRename, String culture, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{parentEntryId}/{fileName}"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "parentEntryId" + "\\}", apiClient.escapeString(parentEntryId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (autoRename != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("autoRename", autoRename));
        if (culture != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("culture", culture));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (electronicDocument != null)
        localVarFormParams.put("electronicDocument", electronicDocument);
        if (request != null)
        localVarFormParams.put("request", request);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importDocumentValidateBeforeCall(String repoId, Integer parentEntryId, String fileName, File electronicDocument, PostEntryWithEdocMetadataRequest request, Boolean autoRename, String culture, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling importDocument(Async)");
        }
        // verify the required parameter 'parentEntryId' is set
        if (parentEntryId == null) {
            throw new ApiException("Missing the required parameter 'parentEntryId' when calling importDocument(Async)");
        }
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling importDocument(Async)");
        }
        
        com.squareup.okhttp.Call call = importDocumentCall(repoId, parentEntryId, fileName, electronicDocument, request, autoRename, culture, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Creates a new document in the specified folder. - Optionally sets metadata and electronic document component. - Optional parameter: autoRename (default false). If an entry already exists with the given name, the entry will be automatically renamed. With this route, partial success is possible. The response returns multiple operation (entryCreate operation, setEdoc operation, setLinks operation, etc..) objects, which contain information about any errors that may have occurred during the creation. As long as the entryCreate operation succeeds, the entry will be created, even if all other operations fail.
     * @param repoId The requested repository ID. (required)
     * @param parentEntryId The entry ID of the folder that the document will be created in. (required)
     * @param fileName The created document&#x27;s file name. (required)
     * @param electronicDocument  (optional)
     * @param request  (optional)
     * @param autoRename An optional query parameter used to indicate if the new document should be automatically             renamed if an entry already exists with the given name in the folder. The default value is false. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @return CreateEntryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateEntryResult importDocument(String repoId, Integer parentEntryId, String fileName, File electronicDocument, PostEntryWithEdocMetadataRequest request, Boolean autoRename, String culture) throws ApiException {
        ApiResponse<CreateEntryResult> resp = importDocumentWithHttpInfo(repoId, parentEntryId, fileName, electronicDocument, request, autoRename, culture);
        return resp.getData();
    }

    /**
     * 
     * - Creates a new document in the specified folder. - Optionally sets metadata and electronic document component. - Optional parameter: autoRename (default false). If an entry already exists with the given name, the entry will be automatically renamed. With this route, partial success is possible. The response returns multiple operation (entryCreate operation, setEdoc operation, setLinks operation, etc..) objects, which contain information about any errors that may have occurred during the creation. As long as the entryCreate operation succeeds, the entry will be created, even if all other operations fail.
     * @param repoId The requested repository ID. (required)
     * @param parentEntryId The entry ID of the folder that the document will be created in. (required)
     * @param fileName The created document&#x27;s file name. (required)
     * @param electronicDocument  (optional)
     * @param request  (optional)
     * @param autoRename An optional query parameter used to indicate if the new document should be automatically             renamed if an entry already exists with the given name in the folder. The default value is false. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @return ApiResponse&lt;CreateEntryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateEntryResult> importDocumentWithHttpInfo(String repoId, Integer parentEntryId, String fileName, File electronicDocument, PostEntryWithEdocMetadataRequest request, Boolean autoRename, String culture) throws ApiException {
        com.squareup.okhttp.Call call = importDocumentValidateBeforeCall(repoId, parentEntryId, fileName, electronicDocument, request, autoRename, culture, null, null);
        Type localVarReturnType = new TypeToken<CreateEntryResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Creates a new document in the specified folder. - Optionally sets metadata and electronic document component. - Optional parameter: autoRename (default false). If an entry already exists with the given name, the entry will be automatically renamed. With this route, partial success is possible. The response returns multiple operation (entryCreate operation, setEdoc operation, setLinks operation, etc..) objects, which contain information about any errors that may have occurred during the creation. As long as the entryCreate operation succeeds, the entry will be created, even if all other operations fail.
     * @param repoId The requested repository ID. (required)
     * @param parentEntryId The entry ID of the folder that the document will be created in. (required)
     * @param fileName The created document&#x27;s file name. (required)
     * @param electronicDocument  (optional)
     * @param request  (optional)
     * @param autoRename An optional query parameter used to indicate if the new document should be automatically             renamed if an entry already exists with the given name in the folder. The default value is false. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importDocumentAsync(String repoId, Integer parentEntryId, String fileName, File electronicDocument, PostEntryWithEdocMetadataRequest request, Boolean autoRename, String culture, final ApiCallback<CreateEntryResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importDocumentValidateBeforeCall(repoId, parentEntryId, fileName, electronicDocument, request, autoRename, culture, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateEntryResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for moveOrRenameDocument
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param body The request containing the folder ID that the entry will be moved to and the new name
            the entry will be renamed to. (optional)
     * @param autoRename An optional query parameter used to indicate if the entry should be automatically             renamed if another entry already exists with the same name in the folder. The default value is false. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveOrRenameDocumentCall(String repoId, Integer entryId, PatchEntryRequest body, Boolean autoRename, String culture, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{entryId}"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (autoRename != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("autoRename", autoRename));
        if (culture != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("culture", culture));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call moveOrRenameDocumentValidateBeforeCall(String repoId, Integer entryId, PatchEntryRequest body, Boolean autoRename, String culture, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling moveOrRenameDocument(Async)");
        }
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling moveOrRenameDocument(Async)");
        }
        
        com.squareup.okhttp.Call call = moveOrRenameDocumentCall(repoId, entryId, body, autoRename, culture, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Moves and/or renames an entry. - Move and/or rename an entry by passing in the new parent folder ID or name in the JSON body. - Optional parameter: autoRename (default false). If an entry already exists with the given name, the entry will be automatically renamed.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param body The request containing the folder ID that the entry will be moved to and the new name
            the entry will be renamed to. (optional)
     * @param autoRename An optional query parameter used to indicate if the entry should be automatically             renamed if another entry already exists with the same name in the folder. The default value is false. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @return Entry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Entry moveOrRenameDocument(String repoId, Integer entryId, PatchEntryRequest body, Boolean autoRename, String culture) throws ApiException {
        ApiResponse<Entry> resp = moveOrRenameDocumentWithHttpInfo(repoId, entryId, body, autoRename, culture);
        return resp.getData();
    }

    /**
     * 
     * - Moves and/or renames an entry. - Move and/or rename an entry by passing in the new parent folder ID or name in the JSON body. - Optional parameter: autoRename (default false). If an entry already exists with the given name, the entry will be automatically renamed.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param body The request containing the folder ID that the entry will be moved to and the new name
            the entry will be renamed to. (optional)
     * @param autoRename An optional query parameter used to indicate if the entry should be automatically             renamed if another entry already exists with the same name in the folder. The default value is false. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @return ApiResponse&lt;Entry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Entry> moveOrRenameDocumentWithHttpInfo(String repoId, Integer entryId, PatchEntryRequest body, Boolean autoRename, String culture) throws ApiException {
        com.squareup.okhttp.Call call = moveOrRenameDocumentValidateBeforeCall(repoId, entryId, body, autoRename, culture, null, null);
        Type localVarReturnType = new TypeToken<Entry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Moves and/or renames an entry. - Move and/or rename an entry by passing in the new parent folder ID or name in the JSON body. - Optional parameter: autoRename (default false). If an entry already exists with the given name, the entry will be automatically renamed.
     * @param repoId The requested repository ID. (required)
     * @param entryId The requested entry ID. (required)
     * @param body The request containing the folder ID that the entry will be moved to and the new name
            the entry will be renamed to. (optional)
     * @param autoRename An optional query parameter used to indicate if the entry should be automatically             renamed if another entry already exists with the same name in the folder. The default value is false. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveOrRenameDocumentAsync(String repoId, Integer entryId, PatchEntryRequest body, Boolean autoRename, String culture, final ApiCallback<Entry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveOrRenameDocumentValidateBeforeCall(repoId, entryId, body, autoRename, culture, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Entry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for writeTemplateValueToEntry
     * @param repoId The requested repository ID. (required)
     * @param entryId The ID of entry that will have its template updated. (required)
     * @param body The template and template fields that will be assigned to the entry. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call writeTemplateValueToEntryCall(String repoId, Integer entryId, PutTemplateRequest body, String culture, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/Repositories/{repoId}/Entries/{entryId}/template"
            .replaceAll("\\{" + "repoId" + "\\}", apiClient.escapeString(repoId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (culture != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("culture", culture));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization", "OAuth2 Authorization Code Flow", "OAuth2 Client Credentials Flow" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call writeTemplateValueToEntryValidateBeforeCall(String repoId, Integer entryId, PutTemplateRequest body, String culture, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'repoId' is set
        if (repoId == null) {
            throw new ApiException("Missing the required parameter 'repoId' when calling writeTemplateValueToEntry(Async)");
        }
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling writeTemplateValueToEntry(Async)");
        }
        
        com.squareup.okhttp.Call call = writeTemplateValueToEntryCall(repoId, entryId, body, culture, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - Assign a template to an entry. - Provide an entry ID, template name, and a list of template fields to assign to that entry. - Only template values will be modified. Any existing independent fields on the entry will not be modified, nor will they be added if included in the request. The only modification to fields will only occur on templated fields. If the previously assigned template includes common template fields as the newly assigned template, the common field values will not be modified.
     * @param repoId The requested repository ID. (required)
     * @param entryId The ID of entry that will have its template updated. (required)
     * @param body The template and template fields that will be assigned to the entry. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @return Entry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Entry writeTemplateValueToEntry(String repoId, Integer entryId, PutTemplateRequest body, String culture) throws ApiException {
        ApiResponse<Entry> resp = writeTemplateValueToEntryWithHttpInfo(repoId, entryId, body, culture);
        return resp.getData();
    }

    /**
     * 
     * - Assign a template to an entry. - Provide an entry ID, template name, and a list of template fields to assign to that entry. - Only template values will be modified. Any existing independent fields on the entry will not be modified, nor will they be added if included in the request. The only modification to fields will only occur on templated fields. If the previously assigned template includes common template fields as the newly assigned template, the common field values will not be modified.
     * @param repoId The requested repository ID. (required)
     * @param entryId The ID of entry that will have its template updated. (required)
     * @param body The template and template fields that will be assigned to the entry. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @return ApiResponse&lt;Entry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Entry> writeTemplateValueToEntryWithHttpInfo(String repoId, Integer entryId, PutTemplateRequest body, String culture) throws ApiException {
        com.squareup.okhttp.Call call = writeTemplateValueToEntryValidateBeforeCall(repoId, entryId, body, culture, null, null);
        Type localVarReturnType = new TypeToken<Entry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * - Assign a template to an entry. - Provide an entry ID, template name, and a list of template fields to assign to that entry. - Only template values will be modified. Any existing independent fields on the entry will not be modified, nor will they be added if included in the request. The only modification to fields will only occur on templated fields. If the previously assigned template includes common template fields as the newly assigned template, the common field values will not be modified.
     * @param repoId The requested repository ID. (required)
     * @param entryId The ID of entry that will have its template updated. (required)
     * @param body The template and template fields that will be assigned to the entry. (optional)
     * @param culture An optional query parameter used to indicate the locale that should be used.             The value should be a standard language tag. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call writeTemplateValueToEntryAsync(String repoId, Integer entryId, PutTemplateRequest body, String culture, final ApiCallback<Entry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = writeTemplateValueToEntryValidateBeforeCall(repoId, entryId, body, culture, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Entry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
