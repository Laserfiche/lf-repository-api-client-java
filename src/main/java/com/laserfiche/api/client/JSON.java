/*
 * Laserfiche Repository API
 * Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p><strong>Build# : </strong>51c16645afa5983c3eb4a849158d6f1e355d2bb0_.20220512.1</p>
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.laserfiche.api.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.PostProcessor;
import io.gsonfire.TypeSelector;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.format.DateTimeFormatter;

import com.laserfiche.api.client.model.*;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Map;
import java.util.HashMap;

public class JSON {
    private Gson gson;
    private boolean isLenientOnJson = false;
    private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();

    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
          .registerTypeSelector(ODataEntry.class, new TypeSelector<ODataEntry>() {
            @Override
            public Class<? extends ODataEntry> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ODataEntry>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("Document".toUpperCase(), Document.class);
                    classByDiscriminatorValue.put("Folder".toUpperCase(), Folder.class);
                    classByDiscriminatorValue.put("Shortcut".toUpperCase(), Shortcut.class);
                    classByDiscriminatorValue.put("ODataEntry".toUpperCase(), ODataEntry.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ODataEntry.class, new PostProcessor<ODataEntry>() {
              @Override
              public void postDeserialize(ODataEntry result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ODataEntry src, Gson gson) {
                  Map<Class<? extends ODataEntry>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(Document.class, "Document");
                      discriminatorValueByClass.put(Folder.class, "Folder");
                      discriminatorValueByClass.put(Shortcut.class, "Shortcut");
                      discriminatorValueByClass.put(ODataEntry.class, "ODataEntry");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(EntryFieldValue.class, new TypeSelector<EntryFieldValue>() {
            @Override
            public Class<? extends EntryFieldValue> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends EntryFieldValue>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("FieldValue".toUpperCase(), FieldValue.class);
                    classByDiscriminatorValue.put("EntryFieldValue".toUpperCase(), EntryFieldValue.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(EntryFieldValue.class, new PostProcessor<EntryFieldValue>() {
              @Override
              public void postDeserialize(EntryFieldValue result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, EntryFieldValue src, Gson gson) {
                  Map<Class<? extends EntryFieldValue>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(FieldValue.class, "FieldValue");
                      discriminatorValueByClass.put(EntryFieldValue.class, "EntryFieldValue");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Entry.class, new TypeSelector<Entry>() {
            @Override
            public Class<? extends Entry> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Entry>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ODataEntry".toUpperCase(), ODataEntry.class);
                    classByDiscriminatorValue.put("Entry".toUpperCase(), Entry.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(Entry.class, new PostProcessor<Entry>() {
              @Override
              public void postDeserialize(Entry result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Entry src, Gson gson) {
                  Map<Class<? extends Entry>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ODataEntry.class, "ODataEntry");
                      discriminatorValueByClass.put(Entry.class, "Entry");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(GetEntryChildren.class, new TypeSelector<GetEntryChildren>() {
            @Override
            public Class<? extends GetEntryChildren> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends GetEntryChildren>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ODataGetEntryChildren".toUpperCase(), ODataGetEntryChildren.class);
                    classByDiscriminatorValue.put("ODataGetSearchResults".toUpperCase(), ODataGetSearchResults.class);
                    classByDiscriminatorValue.put("GetEntryChildren".toUpperCase(), GetEntryChildren.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(GetEntryChildren.class, new PostProcessor<GetEntryChildren>() {
              @Override
              public void postDeserialize(GetEntryChildren result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, GetEntryChildren src, Gson gson) {
                  Map<Class<? extends GetEntryChildren>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ODataGetEntryChildren.class, "ODataGetEntryChildren");
                      discriminatorValueByClass.put(ODataGetSearchResults.class, "ODataGetSearchResults");
                      discriminatorValueByClass.put(GetEntryChildren.class, "GetEntryChildren");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ODataValueOfIListOfContextHit.class, new TypeSelector<ODataValueOfIListOfContextHit>() {
            @Override
            public Class<? extends ODataValueOfIListOfContextHit> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ODataValueOfIListOfContextHit>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ODataValueContextOfIListOfContextHit".toUpperCase(), ODataValueContextOfIListOfContextHit.class);
                    classByDiscriminatorValue.put("ODataValueOfIListOfContextHit".toUpperCase(), ODataValueOfIListOfContextHit.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ODataValueOfIListOfContextHit.class, new PostProcessor<ODataValueOfIListOfContextHit>() {
              @Override
              public void postDeserialize(ODataValueOfIListOfContextHit result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ODataValueOfIListOfContextHit src, Gson gson) {
                  Map<Class<? extends ODataValueOfIListOfContextHit>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ODataValueContextOfIListOfContextHit.class, "ODataValueContextOfIListOfContextHit");
                      discriminatorValueByClass.put(ODataValueOfIListOfContextHit.class, "ODataValueOfIListOfContextHit");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ODataValueOfIListOfFieldValue.class, new TypeSelector<ODataValueOfIListOfFieldValue>() {
            @Override
            public Class<? extends ODataValueOfIListOfFieldValue> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ODataValueOfIListOfFieldValue>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ODataValueContextOfIListOfFieldValue".toUpperCase(), ODataValueContextOfIListOfFieldValue.class);
                    classByDiscriminatorValue.put("ODataValueOfIListOfFieldValue".toUpperCase(), ODataValueOfIListOfFieldValue.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ODataValueOfIListOfFieldValue.class, new PostProcessor<ODataValueOfIListOfFieldValue>() {
              @Override
              public void postDeserialize(ODataValueOfIListOfFieldValue result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ODataValueOfIListOfFieldValue src, Gson gson) {
                  Map<Class<? extends ODataValueOfIListOfFieldValue>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ODataValueContextOfIListOfFieldValue.class, "ODataValueContextOfIListOfFieldValue");
                      discriminatorValueByClass.put(ODataValueOfIListOfFieldValue.class, "ODataValueOfIListOfFieldValue");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ODataValueOfIListOfODataGetEntryChildren.class, new TypeSelector<ODataValueOfIListOfODataGetEntryChildren>() {
            @Override
            public Class<? extends ODataValueOfIListOfODataGetEntryChildren> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ODataValueOfIListOfODataGetEntryChildren>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ODataValueContextOfIListOfODataGetEntryChildren".toUpperCase(), ODataValueContextOfIListOfODataGetEntryChildren.class);
                    classByDiscriminatorValue.put("ODataValueOfIListOfODataGetEntryChildren".toUpperCase(), ODataValueOfIListOfODataGetEntryChildren.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ODataValueOfIListOfODataGetEntryChildren.class, new PostProcessor<ODataValueOfIListOfODataGetEntryChildren>() {
              @Override
              public void postDeserialize(ODataValueOfIListOfODataGetEntryChildren result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ODataValueOfIListOfODataGetEntryChildren src, Gson gson) {
                  Map<Class<? extends ODataValueOfIListOfODataGetEntryChildren>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ODataValueContextOfIListOfODataGetEntryChildren.class, "ODataValueContextOfIListOfODataGetEntryChildren");
                      discriminatorValueByClass.put(ODataValueOfIListOfODataGetEntryChildren.class, "ODataValueOfIListOfODataGetEntryChildren");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ODataValueOfIListOfODataGetSearchResults.class, new TypeSelector<ODataValueOfIListOfODataGetSearchResults>() {
            @Override
            public Class<? extends ODataValueOfIListOfODataGetSearchResults> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ODataValueOfIListOfODataGetSearchResults>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ODataValueContextOfIListOfODataGetSearchResults".toUpperCase(), ODataValueContextOfIListOfODataGetSearchResults.class);
                    classByDiscriminatorValue.put("ODataValueOfIListOfODataGetSearchResults".toUpperCase(), ODataValueOfIListOfODataGetSearchResults.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ODataValueOfIListOfODataGetSearchResults.class, new PostProcessor<ODataValueOfIListOfODataGetSearchResults>() {
              @Override
              public void postDeserialize(ODataValueOfIListOfODataGetSearchResults result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ODataValueOfIListOfODataGetSearchResults src, Gson gson) {
                  Map<Class<? extends ODataValueOfIListOfODataGetSearchResults>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ODataValueContextOfIListOfODataGetSearchResults.class, "ODataValueContextOfIListOfODataGetSearchResults");
                      discriminatorValueByClass.put(ODataValueOfIListOfODataGetSearchResults.class, "ODataValueOfIListOfODataGetSearchResults");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ODataValueOfIListOfTemplateFieldInfo.class, new TypeSelector<ODataValueOfIListOfTemplateFieldInfo>() {
            @Override
            public Class<? extends ODataValueOfIListOfTemplateFieldInfo> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ODataValueOfIListOfTemplateFieldInfo>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ODataValueContextOfIListOfTemplateFieldInfo".toUpperCase(), ODataValueContextOfIListOfTemplateFieldInfo.class);
                    classByDiscriminatorValue.put("ODataValueOfIListOfTemplateFieldInfo".toUpperCase(), ODataValueOfIListOfTemplateFieldInfo.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ODataValueOfIListOfTemplateFieldInfo.class, new PostProcessor<ODataValueOfIListOfTemplateFieldInfo>() {
              @Override
              public void postDeserialize(ODataValueOfIListOfTemplateFieldInfo result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ODataValueOfIListOfTemplateFieldInfo src, Gson gson) {
                  Map<Class<? extends ODataValueOfIListOfTemplateFieldInfo>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ODataValueContextOfIListOfTemplateFieldInfo.class, "ODataValueContextOfIListOfTemplateFieldInfo");
                      discriminatorValueByClass.put(ODataValueOfIListOfTemplateFieldInfo.class, "ODataValueOfIListOfTemplateFieldInfo");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ODataValueOfIListOfWEntryLinkInfo.class, new TypeSelector<ODataValueOfIListOfWEntryLinkInfo>() {
            @Override
            public Class<? extends ODataValueOfIListOfWEntryLinkInfo> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ODataValueOfIListOfWEntryLinkInfo>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ODataValueContextOfIListOfWEntryLinkInfo".toUpperCase(), ODataValueContextOfIListOfWEntryLinkInfo.class);
                    classByDiscriminatorValue.put("ODataValueOfIListOfWEntryLinkInfo".toUpperCase(), ODataValueOfIListOfWEntryLinkInfo.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ODataValueOfIListOfWEntryLinkInfo.class, new PostProcessor<ODataValueOfIListOfWEntryLinkInfo>() {
              @Override
              public void postDeserialize(ODataValueOfIListOfWEntryLinkInfo result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ODataValueOfIListOfWEntryLinkInfo src, Gson gson) {
                  Map<Class<? extends ODataValueOfIListOfWEntryLinkInfo>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ODataValueContextOfIListOfWEntryLinkInfo.class, "ODataValueContextOfIListOfWEntryLinkInfo");
                      discriminatorValueByClass.put(ODataValueOfIListOfWEntryLinkInfo.class, "ODataValueOfIListOfWEntryLinkInfo");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ODataValueOfIListOfWFieldInfo.class, new TypeSelector<ODataValueOfIListOfWFieldInfo>() {
            @Override
            public Class<? extends ODataValueOfIListOfWFieldInfo> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ODataValueOfIListOfWFieldInfo>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ODataValueContextOfIListOfWFieldInfo".toUpperCase(), ODataValueContextOfIListOfWFieldInfo.class);
                    classByDiscriminatorValue.put("ODataValueOfIListOfWFieldInfo".toUpperCase(), ODataValueOfIListOfWFieldInfo.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ODataValueOfIListOfWFieldInfo.class, new PostProcessor<ODataValueOfIListOfWFieldInfo>() {
              @Override
              public void postDeserialize(ODataValueOfIListOfWFieldInfo result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ODataValueOfIListOfWFieldInfo src, Gson gson) {
                  Map<Class<? extends ODataValueOfIListOfWFieldInfo>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ODataValueContextOfIListOfWFieldInfo.class, "ODataValueContextOfIListOfWFieldInfo");
                      discriminatorValueByClass.put(ODataValueOfIListOfWFieldInfo.class, "ODataValueOfIListOfWFieldInfo");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ODataValueOfIListOfWTagInfo.class, new TypeSelector<ODataValueOfIListOfWTagInfo>() {
            @Override
            public Class<? extends ODataValueOfIListOfWTagInfo> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ODataValueOfIListOfWTagInfo>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ODataValueContextOfIListOfWTagInfo".toUpperCase(), ODataValueContextOfIListOfWTagInfo.class);
                    classByDiscriminatorValue.put("ODataValueOfIListOfWTagInfo".toUpperCase(), ODataValueOfIListOfWTagInfo.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ODataValueOfIListOfWTagInfo.class, new PostProcessor<ODataValueOfIListOfWTagInfo>() {
              @Override
              public void postDeserialize(ODataValueOfIListOfWTagInfo result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ODataValueOfIListOfWTagInfo src, Gson gson) {
                  Map<Class<? extends ODataValueOfIListOfWTagInfo>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ODataValueContextOfIListOfWTagInfo.class, "ODataValueContextOfIListOfWTagInfo");
                      discriminatorValueByClass.put(ODataValueOfIListOfWTagInfo.class, "ODataValueOfIListOfWTagInfo");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ODataValueOfIListOfWTemplateInfo.class, new TypeSelector<ODataValueOfIListOfWTemplateInfo>() {
            @Override
            public Class<? extends ODataValueOfIListOfWTemplateInfo> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ODataValueOfIListOfWTemplateInfo>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ODataValueContextOfIListOfWTemplateInfo".toUpperCase(), ODataValueContextOfIListOfWTemplateInfo.class);
                    classByDiscriminatorValue.put("ODataValueOfIListOfWTemplateInfo".toUpperCase(), ODataValueOfIListOfWTemplateInfo.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ODataValueOfIListOfWTemplateInfo.class, new PostProcessor<ODataValueOfIListOfWTemplateInfo>() {
              @Override
              public void postDeserialize(ODataValueOfIListOfWTemplateInfo result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ODataValueOfIListOfWTemplateInfo src, Gson gson) {
                  Map<Class<? extends ODataValueOfIListOfWTemplateInfo>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ODataValueContextOfIListOfWTemplateInfo.class, "ODataValueContextOfIListOfWTemplateInfo");
                      discriminatorValueByClass.put(ODataValueOfIListOfWTemplateInfo.class, "ODataValueOfIListOfWTemplateInfo");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(ODataValueOfListOfAttribute.class, new TypeSelector<ODataValueOfListOfAttribute>() {
            @Override
            public Class<? extends ODataValueOfListOfAttribute> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends ODataValueOfListOfAttribute>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ODataValueContextOfListOfAttribute".toUpperCase(), ODataValueContextOfListOfAttribute.class);
                    classByDiscriminatorValue.put("ODataValueOfListOfAttribute".toUpperCase(), ODataValueOfListOfAttribute.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(ODataValueOfListOfAttribute.class, new PostProcessor<ODataValueOfListOfAttribute>() {
              @Override
              public void postDeserialize(ODataValueOfListOfAttribute result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, ODataValueOfListOfAttribute src, Gson gson) {
                  Map<Class<? extends ODataValueOfListOfAttribute>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ODataValueContextOfListOfAttribute.class, "ODataValueContextOfListOfAttribute");
                      discriminatorValueByClass.put(ODataValueOfListOfAttribute.class, "ODataValueOfListOfAttribute");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(SimpleImportMetadata.class, new TypeSelector<SimpleImportMetadata>() {
            @Override
            public Class<? extends SimpleImportMetadata> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends SimpleImportMetadata>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("PutFieldValsRequest".toUpperCase(), PutFieldValsRequest.class);
                    classByDiscriminatorValue.put("SimpleImportMetadata".toUpperCase(), SimpleImportMetadata.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(SimpleImportMetadata.class, new PostProcessor<SimpleImportMetadata>() {
              @Override
              public void postDeserialize(SimpleImportMetadata result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, SimpleImportMetadata src, Gson gson) {
                  Map<Class<? extends SimpleImportMetadata>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(PutFieldValsRequest.class, "PutFieldValsRequest");
                      discriminatorValueByClass.put(SimpleImportMetadata.class, "SimpleImportMetadata");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(WFieldInfo.class, new TypeSelector<WFieldInfo>() {
            @Override
            public Class<? extends WFieldInfo> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends WFieldInfo>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("TemplateFieldInfo".toUpperCase(), TemplateFieldInfo.class);
                    classByDiscriminatorValue.put("WFieldInfo".toUpperCase(), WFieldInfo.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(WFieldInfo.class, new PostProcessor<WFieldInfo>() {
              @Override
              public void postDeserialize(WFieldInfo result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, WFieldInfo src, Gson gson) {
                  Map<Class<? extends WFieldInfo>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(TemplateFieldInfo.class, "TemplateFieldInfo");
                      discriminatorValueByClass.put(WFieldInfo.class, "WFieldInfo");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
        ;
        return fireBuilder.createGsonBuilder();
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if(null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    private static <T> Class<? extends T> getClassByDiscriminator(Map<String, Class<? extends T>> classByDiscriminatorValue, String discriminatorValue) {
        Class<? extends T> clazz = classByDiscriminatorValue.get(discriminatorValue.toUpperCase());
        if(null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    public JSON() {
        gson = createGson()
            .registerTypeAdapter(Date.class, dateTypeAdapter)
            .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
            .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)
            .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
            .create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     * @return JSON
     */
    public JSON setGson(Gson gson) {
        this.gson = gson;
        return this;
    }

    public JSON setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
        return this;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class))
                return (T) body;
            else throw (e);
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public JSON setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {
        }

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {
        }

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public JSON setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

}
